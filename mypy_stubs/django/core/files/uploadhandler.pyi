# Stubs for django.core.files.uploadhandler (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class UploadFileException(Exception): ...

class StopUpload(UploadFileException):
    connection_reset: Any = ...
    def __init__(self, connection_reset: bool = ...) -> None: ...

class SkipFile(UploadFileException): ...
class StopFutureHandlers(UploadFileException): ...

class FileUploadHandler:
    chunk_size: Any = ...
    file_name: Any = ...
    content_type: Any = ...
    content_length: Any = ...
    charset: Any = ...
    content_type_extra: Any = ...
    request: Any = ...
    def __init__(self, request: Optional[Any] = ...) -> None: ...
    def handle_raw_input(self, input_data: Any, META: Any, content_length: Any, boundary: Any, encoding: Optional[Any] = ...) -> None: ...
    field_name: Any = ...
    def new_file(self, field_name: Any, file_name: Any, content_type: Any, content_length: Any, charset: Optional[Any] = ..., content_type_extra: Optional[Any] = ...) -> None: ...
    def receive_data_chunk(self, raw_data: Any, start: Any) -> None: ...
    def file_complete(self, file_size: Any) -> None: ...
    def upload_complete(self) -> None: ...

class TemporaryFileUploadHandler(FileUploadHandler):
    file: Any = ...
    def new_file(self, *args: Any, **kwargs: Any) -> None: ...
    def receive_data_chunk(self, raw_data: Any, start: Any) -> None: ...
    def file_complete(self, file_size: Any): ...

class MemoryFileUploadHandler(FileUploadHandler):
    activated: Any = ...
    def handle_raw_input(self, input_data: Any, META: Any, content_length: Any, boundary: Any, encoding: Optional[Any] = ...) -> None: ...
    file: Any = ...
    def new_file(self, *args: Any, **kwargs: Any) -> None: ...
    def receive_data_chunk(self, raw_data: Any, start: Any): ...
    def file_complete(self, file_size: Any): ...

def load_handler(path: Any, *args: Any, **kwargs: Any): ...

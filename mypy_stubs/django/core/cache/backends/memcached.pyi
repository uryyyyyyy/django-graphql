# Stubs for django.core.cache.backends.memcached (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.cache.backends.base import BaseCache
from typing import Any, Optional

class BaseMemcachedCache(BaseCache):
    LibraryValueNotFoundException: Any = ...
    def __init__(self, server: Any, params: Any, library: Any, value_not_found_exception: Any) -> None: ...
    def get_backend_timeout(self, timeout: Any = ...): ...
    def add(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ...): ...
    def get(self, key: Any, default: Optional[Any] = ..., version: Optional[Any] = ...): ...
    def set(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ...) -> None: ...
    def delete(self, key: Any, version: Optional[Any] = ...) -> None: ...
    def get_many(self, keys: Any, version: Optional[Any] = ...): ...
    def close(self, **kwargs: Any) -> None: ...
    def incr(self, key: Any, delta: int = ..., version: Optional[Any] = ...): ...
    def decr(self, key: Any, delta: int = ..., version: Optional[Any] = ...): ...
    def set_many(self, data: Any, timeout: Any = ..., version: Optional[Any] = ...): ...
    def delete_many(self, keys: Any, version: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

class MemcachedCache(BaseMemcachedCache):
    def __init__(self, server: Any, params: Any) -> None: ...
    def touch(self, key: Any, timeout: Any = ..., version: Optional[Any] = ...): ...

class PyLibMCCache(BaseMemcachedCache):
    def __init__(self, server: Any, params: Any) -> None: ...
    def touch(self, key: Any, timeout: Any = ..., version: Optional[Any] = ...): ...
    def close(self, **kwargs: Any) -> None: ...

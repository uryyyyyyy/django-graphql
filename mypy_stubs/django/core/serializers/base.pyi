# Stubs for django.core.serializers.base (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class SerializerDoesNotExist(KeyError): ...
class SerializationError(Exception): ...

class DeserializationError(Exception):
    @classmethod
    def WithData(cls, original_exc: Any, model: Any, fk: Any, field_value: Any): ...

class M2MDeserializationError(Exception):
    original_exc: Any = ...
    pk: Any = ...
    def __init__(self, original_exc: Any, pk: Any) -> None: ...

class ProgressBar:
    progress_width: int = ...
    output: Any = ...
    total_count: Any = ...
    prev_done: int = ...
    def __init__(self, output: Any, total_count: Any) -> None: ...
    def update(self, count: Any) -> None: ...

class Serializer:
    internal_use_only: bool = ...
    progress_class: Any = ...
    stream_class: Any = ...
    options: Any = ...
    stream: Any = ...
    selected_fields: Any = ...
    use_natural_foreign_keys: Any = ...
    use_natural_primary_keys: Any = ...
    first: bool = ...
    def serialize(self, queryset: Any, *, stream: Optional[Any] = ..., fields: Optional[Any] = ..., use_natural_foreign_keys: bool = ..., use_natural_primary_keys: bool = ..., progress_output: Optional[Any] = ..., object_count: int = ..., **options: Any): ...
    def start_serialization(self) -> None: ...
    def end_serialization(self) -> None: ...
    def start_object(self, obj: Any) -> None: ...
    def end_object(self, obj: Any) -> None: ...
    def handle_field(self, obj: Any, field: Any) -> None: ...
    def handle_fk_field(self, obj: Any, field: Any) -> None: ...
    def handle_m2m_field(self, obj: Any, field: Any) -> None: ...
    def getvalue(self): ...

class Deserializer:
    options: Any = ...
    stream: Any = ...
    def __init__(self, stream_or_string: Any, **options: Any) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...

class DeserializedObject:
    object: Any = ...
    m2m_data: Any = ...
    def __init__(self, obj: Any, m2m_data: Optional[Any] = ...) -> None: ...
    def save(self, save_m2m: bool = ..., using: Optional[Any] = ..., **kwargs: Any) -> None: ...

def build_instance(Model: Any, data: Any, db: Any): ...
def deserialize_m2m_values(field: Any, field_value: Any, using: Any): ...
def deserialize_fk_value(field: Any, field_value: Any, using: Any): ...

# Stubs for django.contrib.postgres.search (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models import Field
from django.db.models.expressions import CombinedExpression, Func, Value
from django.db.models.lookups import Lookup
from typing import Any, Optional

class SearchVectorExact(Lookup):
    lookup_name: str = ...
    rhs: Any = ...
    def process_rhs(self, qn: Any, connection: Any): ...
    def as_sql(self, qn: Any, connection: Any): ...

class SearchVectorField(Field):
    def db_type(self, connection: Any): ...

class SearchQueryField(Field):
    def db_type(self, connection: Any): ...

class SearchVectorCombinable:
    ADD: str = ...

class SearchVector(SearchVectorCombinable, Func):
    function: str = ...
    arg_joiner: str = ...
    output_field: Any = ...
    config: Any = ...
    source_expressions: Any = ...
    weight: Any = ...
    def __init__(self, *expressions: Any, **extra: Any) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler: Any, connection: Any, function: Optional[Any] = ..., template: Optional[Any] = ...): ...

class CombinedSearchVector(SearchVectorCombinable, CombinedExpression):
    config: Any = ...
    def __init__(self, lhs: Any, connector: Any, rhs: Any, config: Any, output_field: Optional[Any] = ...) -> None: ...

class SearchQueryCombinable:
    BITAND: str = ...
    BITOR: str = ...
    def __or__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __rand__(self, other: Any): ...

class SearchQuery(SearchQueryCombinable, Value):
    output_field: Any = ...
    config: Any = ...
    invert: Any = ...
    def __init__(self, value: Any, output_field: Optional[Any] = ..., *, config: Optional[Any] = ..., invert: bool = ...) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def __invert__(self): ...

class CombinedSearchQuery(SearchQueryCombinable, CombinedExpression):
    config: Any = ...
    def __init__(self, lhs: Any, connector: Any, rhs: Any, config: Any, output_field: Optional[Any] = ...) -> None: ...

class SearchRank(Func):
    function: str = ...
    output_field: Any = ...
    weights: Any = ...
    def __init__(self, vector: Any, query: Any, **extra: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any, function: Optional[Any] = ..., template: Optional[Any] = ...): ...

class TrigramBase(Func):
    output_field: Any = ...
    def __init__(self, expression: Any, string: Any, **extra: Any) -> None: ...

class TrigramSimilarity(TrigramBase):
    function: str = ...

class TrigramDistance(TrigramBase):
    function: str = ...
    arg_joiner: str = ...

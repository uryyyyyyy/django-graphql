# Stubs for django.contrib.admin.widgets (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django import forms
from typing import Any, Optional

class FilteredSelectMultiple(forms.SelectMultiple):
    @property
    def media(self): ...
    verbose_name: Any = ...
    is_stacked: Any = ...
    def __init__(self, verbose_name: Any, is_stacked: Any, attrs: Optional[Any] = ..., choices: Any = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...

class AdminDateWidget(forms.DateInput):
    @property
    def media(self): ...
    def __init__(self, attrs: Optional[Any] = ..., format: Optional[Any] = ...) -> None: ...

class AdminTimeWidget(forms.TimeInput):
    @property
    def media(self): ...
    def __init__(self, attrs: Optional[Any] = ..., format: Optional[Any] = ...) -> None: ...

class AdminSplitDateTime(forms.SplitDateTimeWidget):
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...

class AdminRadioSelect(forms.RadioSelect):
    template_name: str = ...

class AdminFileWidget(forms.ClearableFileInput):
    template_name: str = ...

def url_params_from_lookup_dict(lookups: Any): ...

class ForeignKeyRawIdWidget(forms.TextInput):
    template_name: str = ...
    rel: Any = ...
    admin_site: Any = ...
    db: Any = ...
    def __init__(self, rel: Any, admin_site: Any, attrs: Optional[Any] = ..., using: Optional[Any] = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def base_url_parameters(self): ...
    def url_parameters(self): ...
    def label_and_url_for_value(self, value: Any): ...

class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):
    template_name: str = ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def url_parameters(self): ...
    def label_and_url_for_value(self, value: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def format_value(self, value: Any): ...

class RelatedFieldWidgetWrapper(forms.Widget):
    template_name: str = ...
    needs_multipart_form: Any = ...
    attrs: Any = ...
    choices: Any = ...
    widget: Any = ...
    rel: Any = ...
    can_add_related: Any = ...
    can_change_related: Any = ...
    can_delete_related: Any = ...
    can_view_related: Any = ...
    admin_site: Any = ...
    def __init__(self, widget: Any, rel: Any, admin_site: Any, can_add_related: Optional[Any] = ..., can_change_related: bool = ..., can_delete_related: bool = ..., can_view_related: bool = ...) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    @property
    def is_hidden(self): ...
    @property
    def media(self): ...
    def get_related_url(self, info: Any, action: Any, *args: Any): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...
    def id_for_label(self, id_: Any): ...

class AdminTextareaWidget(forms.Textarea):
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...

class AdminTextInputWidget(forms.TextInput):
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...

class AdminEmailInputWidget(forms.EmailInput):
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...

class AdminURLFieldWidget(forms.URLInput):
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...

class AdminIntegerFieldWidget(forms.NumberInput):
    class_name: str = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...

class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):
    class_name: str = ...

SELECT2_TRANSLATIONS: Any

class AutocompleteMixin:
    url_name: str = ...
    rel: Any = ...
    admin_site: Any = ...
    db: Any = ...
    choices: Any = ...
    attrs: Any = ...
    def __init__(self, rel: Any, admin_site: Any, attrs: Optional[Any] = ..., choices: Any = ..., using: Optional[Any] = ...) -> None: ...
    def get_url(self): ...
    def build_attrs(self, base_attrs: Any, extra_attrs: Optional[Any] = ...): ...
    def optgroups(self, name: Any, value: Any, attr: Optional[Any] = ...): ...
    @property
    def media(self): ...

class AutocompleteSelect(AutocompleteMixin, forms.Select): ...
class AutocompleteSelectMultiple(AutocompleteMixin, forms.SelectMultiple): ...

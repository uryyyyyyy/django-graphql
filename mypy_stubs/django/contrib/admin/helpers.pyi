# Stubs for django.contrib.admin.helpers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django import forms
from django.forms.utils import ErrorList
from typing import Any, Optional

ACTION_CHECKBOX_NAME: str

class ActionForm(forms.Form):
    action: Any = ...
    select_across: Any = ...

checkbox: Any

class AdminForm:
    prepopulated_fields: Any = ...
    model_admin: Any = ...
    readonly_fields: Any = ...
    def __init__(self, form: Any, fieldsets: Any, prepopulated_fields: Any, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> None: ...
    @property
    def errors(self): ...
    @property
    def non_field_errors(self): ...
    @property
    def media(self): ...

class Fieldset:
    form: Any = ...
    classes: Any = ...
    description: Any = ...
    model_admin: Any = ...
    readonly_fields: Any = ...
    def __init__(self, form: Any, name: Optional[Any] = ..., readonly_fields: Any = ..., fields: Any = ..., classes: Any = ..., description: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    @property
    def media(self): ...
    def __iter__(self) -> None: ...

class Fieldline:
    form: Any = ...
    fields: Any = ...
    has_visible_field: Any = ...
    model_admin: Any = ...
    readonly_fields: Any = ...
    def __init__(self, form: Any, field: Any, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> None: ...
    def errors(self): ...

class AdminField:
    field: Any = ...
    is_first: Any = ...
    is_checkbox: Any = ...
    is_readonly: bool = ...
    def __init__(self, form: Any, field: Any, is_first: Any) -> None: ...
    def label_tag(self): ...
    def errors(self): ...

class AdminReadonlyField:
    field: Any = ...
    form: Any = ...
    model_admin: Any = ...
    is_first: Any = ...
    is_checkbox: bool = ...
    is_readonly: bool = ...
    empty_value_display: Any = ...
    def __init__(self, form: Any, field: Any, is_first: Any, model_admin: Optional[Any] = ...) -> None: ...
    def label_tag(self): ...
    def contents(self): ...

class InlineAdminFormSet:
    opts: Any = ...
    formset: Any = ...
    fieldsets: Any = ...
    model_admin: Any = ...
    readonly_fields: Any = ...
    prepopulated_fields: Any = ...
    classes: Any = ...
    has_add_permission: Any = ...
    has_change_permission: Any = ...
    has_delete_permission: Any = ...
    has_view_permission: Any = ...
    def __init__(self, inline: Any, formset: Any, fieldsets: Any, prepopulated_fields: Optional[Any] = ..., readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ..., has_add_permission: bool = ..., has_change_permission: bool = ..., has_delete_permission: bool = ..., has_view_permission: bool = ...) -> None: ...
    def __iter__(self) -> None: ...
    def fields(self) -> None: ...
    def inline_formset_data(self): ...
    @property
    def forms(self): ...
    @property
    def non_form_errors(self): ...
    @property
    def media(self): ...

class InlineAdminForm(AdminForm):
    formset: Any = ...
    model_admin: Any = ...
    original: Any = ...
    show_url: Any = ...
    absolute_url: Any = ...
    def __init__(self, formset: Any, form: Any, fieldsets: Any, prepopulated_fields: Any, original: Any, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ..., view_on_site_url: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> None: ...
    def needs_explicit_pk_field(self): ...
    def pk_field(self): ...
    def fk_field(self): ...
    def deletion_field(self): ...
    def ordering_field(self): ...

class InlineFieldset(Fieldset):
    formset: Any = ...
    def __init__(self, formset: Any, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> None: ...

class AdminErrorList(ErrorList):
    def __init__(self, form: Any, inline_formsets: Any) -> None: ...

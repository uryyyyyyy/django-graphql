# Stubs for django.contrib.auth.hashers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

UNUSABLE_PASSWORD_PREFIX: str
UNUSABLE_PASSWORD_SUFFIX_LENGTH: int

def is_password_usable(encoded: Any): ...
def check_password(password: Any, encoded: Any, setter: Optional[Any] = ..., preferred: str = ...): ...
def make_password(password: Any, salt: Optional[Any] = ..., hasher: str = ...): ...
def get_hashers(): ...
def get_hashers_by_algorithm(): ...
def reset_hashers(**kwargs: Any) -> None: ...
def get_hasher(algorithm: str = ...): ...
def identify_hasher(encoded: Any): ...
def mask_hash(hash: Any, show: int = ..., char: str = ...): ...

class BasePasswordHasher:
    algorithm: Any = ...
    library: Any = ...
    def salt(self): ...
    def verify(self, password: Any, encoded: Any) -> None: ...
    def encode(self, password: Any, salt: Any) -> None: ...
    def safe_summary(self, encoded: Any) -> None: ...
    def must_update(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class PBKDF2PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    iterations: int = ...
    digest: Any = ...
    def encode(self, password: Any, salt: Any, iterations: Optional[Any] = ...): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def must_update(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):
    algorithm: str = ...
    digest: Any = ...

class Argon2PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    library: str = ...
    time_cost: int = ...
    memory_cost: int = ...
    parallelism: int = ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def must_update(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class BCryptSHA256PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    digest: Any = ...
    library: Any = ...
    rounds: int = ...
    def salt(self): ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def must_update(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class BCryptPasswordHasher(BCryptSHA256PasswordHasher):
    algorithm: str = ...
    digest: Any = ...

class SHA1PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class MD5PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class UnsaltedSHA1PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    def salt(self): ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class UnsaltedMD5PasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    def salt(self): ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

class CryptPasswordHasher(BasePasswordHasher):
    algorithm: str = ...
    library: str = ...
    def salt(self): ...
    def encode(self, password: Any, salt: Any): ...
    def verify(self, password: Any, encoded: Any): ...
    def safe_summary(self, encoded: Any): ...
    def harden_runtime(self, password: Any, encoded: Any) -> None: ...

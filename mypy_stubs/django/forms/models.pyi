# Stubs for django.forms.models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.forms.fields import ChoiceField, Field
from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
from django.forms.formsets import BaseFormSet
from typing import Any, Optional

ALL_FIELDS: str

def model_to_dict(instance: Any, fields: Optional[Any] = ..., exclude: Optional[Any] = ...): ...
def fields_for_model(model: Any, fields: Optional[Any] = ..., exclude: Optional[Any] = ..., widgets: Optional[Any] = ..., formfield_callback: Optional[Any] = ..., localized_fields: Optional[Any] = ..., labels: Optional[Any] = ..., help_texts: Optional[Any] = ..., error_messages: Optional[Any] = ..., field_classes: Optional[Any] = ..., *, apply_limit_choices_to: bool = ...): ...

class ModelFormOptions:
    model: Any = ...
    fields: Any = ...
    exclude: Any = ...
    widgets: Any = ...
    localized_fields: Any = ...
    labels: Any = ...
    help_texts: Any = ...
    error_messages: Any = ...
    field_classes: Any = ...
    def __init__(self, options: Optional[Any] = ...) -> None: ...

class ModelFormMetaclass(DeclarativeFieldsMetaclass):
    def __new__(mcs: Any, name: Any, bases: Any, attrs: Any): ...

class BaseModelForm(BaseForm):
    instance: Any = ...
    def __init__(self, data: Optional[Any] = ..., files: Optional[Any] = ..., auto_id: str = ..., prefix: Optional[Any] = ..., initial: Optional[Any] = ..., error_class: Any = ..., label_suffix: Optional[Any] = ..., empty_permitted: bool = ..., instance: Optional[Any] = ..., use_required_attribute: Optional[Any] = ..., renderer: Optional[Any] = ...) -> None: ...
    def clean(self): ...
    def validate_unique(self) -> None: ...
    save_m2m: Any = ...
    def save(self, commit: bool = ...): ...

class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass): ...

def modelform_factory(model: Any, form: Any = ..., fields: Optional[Any] = ..., exclude: Optional[Any] = ..., formfield_callback: Optional[Any] = ..., widgets: Optional[Any] = ..., localized_fields: Optional[Any] = ..., labels: Optional[Any] = ..., help_texts: Optional[Any] = ..., error_messages: Optional[Any] = ..., field_classes: Optional[Any] = ...): ...

class BaseModelFormSet(BaseFormSet):
    model: Any = ...
    unique_fields: Any = ...
    queryset: Any = ...
    initial_extra: Any = ...
    def __init__(self, data: Optional[Any] = ..., files: Optional[Any] = ..., auto_id: str = ..., prefix: Optional[Any] = ..., queryset: Optional[Any] = ..., *, initial: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def initial_form_count(self): ...
    def get_queryset(self): ...
    def save_new(self, form: Any, commit: bool = ...): ...
    def save_existing(self, form: Any, instance: Any, commit: bool = ...): ...
    def delete_existing(self, obj: Any, commit: bool = ...) -> None: ...
    saved_forms: Any = ...
    save_m2m: Any = ...
    def save(self, commit: bool = ...): ...
    def clean(self) -> None: ...
    def validate_unique(self) -> None: ...
    def get_unique_error_message(self, unique_check: Any): ...
    def get_date_error_message(self, date_check: Any): ...
    def get_form_error(self): ...
    changed_objects: Any = ...
    deleted_objects: Any = ...
    def save_existing_objects(self, commit: bool = ...): ...
    new_objects: Any = ...
    def save_new_objects(self, commit: bool = ...): ...
    def add_fields(self, form: Any, index: Any): ...

def modelformset_factory(model: Any, form: Any = ..., formfield_callback: Optional[Any] = ..., formset: Any = ..., extra: int = ..., can_delete: bool = ..., can_order: bool = ..., max_num: Optional[Any] = ..., fields: Optional[Any] = ..., exclude: Optional[Any] = ..., widgets: Optional[Any] = ..., validate_max: bool = ..., localized_fields: Optional[Any] = ..., labels: Optional[Any] = ..., help_texts: Optional[Any] = ..., error_messages: Optional[Any] = ..., min_num: Optional[Any] = ..., validate_min: bool = ..., field_classes: Optional[Any] = ...): ...

class BaseInlineFormSet(BaseModelFormSet):
    instance: Any = ...
    save_as_new: Any = ...
    unique_fields: Any = ...
    def __init__(self, data: Optional[Any] = ..., files: Optional[Any] = ..., instance: Optional[Any] = ..., save_as_new: bool = ..., prefix: Optional[Any] = ..., queryset: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def initial_form_count(self): ...
    @classmethod
    def get_default_prefix(cls): ...
    def save_new(self, form: Any, commit: bool = ...): ...
    def add_fields(self, form: Any, index: Any) -> None: ...
    def get_unique_error_message(self, unique_check: Any): ...

def inlineformset_factory(parent_model: Any, model: Any, form: Any = ..., formset: Any = ..., fk_name: Optional[Any] = ..., fields: Optional[Any] = ..., exclude: Optional[Any] = ..., extra: int = ..., can_order: bool = ..., can_delete: bool = ..., max_num: Optional[Any] = ..., formfield_callback: Optional[Any] = ..., widgets: Optional[Any] = ..., validate_max: bool = ..., localized_fields: Optional[Any] = ..., labels: Optional[Any] = ..., help_texts: Optional[Any] = ..., error_messages: Optional[Any] = ..., min_num: Optional[Any] = ..., validate_min: bool = ..., field_classes: Optional[Any] = ...): ...

class InlineForeignKeyField(Field):
    widget: Any = ...
    default_error_messages: Any = ...
    parent_instance: Any = ...
    pk_field: Any = ...
    to_field: Any = ...
    def __init__(self, parent_instance: Any, *args: Any, pk_field: bool = ..., to_field: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def clean(self, value: Any): ...
    def has_changed(self, initial: Any, data: Any): ...

class ModelChoiceIterator:
    field: Any = ...
    queryset: Any = ...
    def __init__(self, field: Any) -> None: ...
    def __iter__(self) -> None: ...
    def __len__(self): ...
    def __bool__(self): ...
    def choice(self, obj: Any): ...

class ModelChoiceField(ChoiceField):
    default_error_messages: Any = ...
    iterator: Any = ...
    empty_label: Any = ...
    queryset: Any = ...
    limit_choices_to: Any = ...
    to_field_name: Any = ...
    def __init__(self, queryset: Any, *, empty_label: str = ..., required: bool = ..., widget: Optional[Any] = ..., label: Optional[Any] = ..., initial: Optional[Any] = ..., help_text: str = ..., to_field_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_limit_choices_to(self): ...
    def __deepcopy__(self, memo: Any): ...
    def label_from_instance(self, obj: Any): ...
    choices: Any = ...
    def prepare_value(self, value: Any): ...
    def to_python(self, value: Any): ...
    def validate(self, value: Any): ...
    def has_changed(self, initial: Any, data: Any): ...

class ModelMultipleChoiceField(ModelChoiceField):
    widget: Any = ...
    hidden_widget: Any = ...
    default_error_messages: Any = ...
    def __init__(self, queryset: Any, **kwargs: Any) -> None: ...
    def to_python(self, value: Any): ...
    def clean(self, value: Any): ...
    def prepare_value(self, value: Any): ...
    def has_changed(self, initial: Any, data: Any): ...

# Stubs for django.forms.widgets (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class MediaOrderConflictWarning(RuntimeWarning): ...

class Media:
    def __init__(self, media: Optional[Any] = ..., css: Optional[Any] = ..., js: Optional[Any] = ...) -> None: ...
    def render(self): ...
    def render_js(self): ...
    def render_css(self): ...
    def absolute_path(self, path: Any): ...
    def __getitem__(self, name: Any): ...
    @staticmethod
    def merge(list_1: Any, list_2: Any): ...
    def __add__(self, other: Any): ...

class MediaDefiningClass(type):
    def __new__(mcs: Any, name: Any, bases: Any, attrs: Any): ...

class Widget(metaclass=MediaDefiningClass):
    needs_multipart_form: bool = ...
    is_localized: bool = ...
    is_required: bool = ...
    supports_microseconds: bool = ...
    attrs: Any = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    @property
    def is_hidden(self): ...
    def subwidgets(self, name: Any, value: Any, attrs: Optional[Any] = ...) -> None: ...
    def format_value(self, value: Any): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def render(self, name: Any, value: Any, attrs: Optional[Any] = ..., renderer: Optional[Any] = ...): ...
    def build_attrs(self, base_attrs: Any, extra_attrs: Optional[Any] = ...): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...
    def id_for_label(self, id_: Any): ...
    def use_required_attribute(self, initial: Any): ...

class Input(Widget):
    input_type: Any = ...
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...

class TextInput(Input):
    input_type: str = ...
    template_name: str = ...

class NumberInput(Input):
    input_type: str = ...
    template_name: str = ...

class EmailInput(Input):
    input_type: str = ...
    template_name: str = ...

class URLInput(Input):
    input_type: str = ...
    template_name: str = ...

class PasswordInput(Input):
    input_type: str = ...
    template_name: str = ...
    render_value: Any = ...
    def __init__(self, attrs: Optional[Any] = ..., render_value: bool = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...

class HiddenInput(Input):
    input_type: str = ...
    template_name: str = ...

class MultipleHiddenInput(HiddenInput):
    template_name: str = ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def format_value(self, value: Any): ...

class FileInput(Input):
    input_type: str = ...
    needs_multipart_form: bool = ...
    template_name: str = ...
    def format_value(self, value: Any) -> None: ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...

class ClearableFileInput(FileInput):
    clear_checkbox_label: Any = ...
    initial_text: Any = ...
    input_text: Any = ...
    template_name: str = ...
    def clear_checkbox_name(self, name: Any): ...
    def clear_checkbox_id(self, name: Any): ...
    def is_initial(self, value: Any): ...
    def format_value(self, value: Any): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def use_required_attribute(self, initial: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...

class Textarea(Widget):
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...

class DateTimeBaseInput(TextInput):
    format_key: str = ...
    supports_microseconds: bool = ...
    format: Any = ...
    def __init__(self, attrs: Optional[Any] = ..., format: Optional[Any] = ...) -> None: ...
    def format_value(self, value: Any): ...

class DateInput(DateTimeBaseInput):
    format_key: str = ...
    template_name: str = ...

class DateTimeInput(DateTimeBaseInput):
    format_key: str = ...
    template_name: str = ...

class TimeInput(DateTimeBaseInput):
    format_key: str = ...
    template_name: str = ...

class CheckboxInput(Input):
    input_type: str = ...
    template_name: str = ...
    check_test: Any = ...
    def __init__(self, attrs: Optional[Any] = ..., check_test: Optional[Any] = ...) -> None: ...
    def format_value(self, value: Any): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...

class ChoiceWidget(Widget):
    allow_multiple_selected: bool = ...
    input_type: Any = ...
    template_name: Any = ...
    option_template_name: Any = ...
    add_id_index: bool = ...
    checked_attribute: Any = ...
    option_inherits_attrs: bool = ...
    choices: Any = ...
    def __init__(self, attrs: Optional[Any] = ..., choices: Any = ...) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    def subwidgets(self, name: Any, value: Any, attrs: Optional[Any] = ...) -> None: ...
    def options(self, name: Any, value: Any, attrs: Optional[Any] = ...) -> None: ...
    def optgroups(self, name: Any, value: Any, attrs: Optional[Any] = ...): ...
    def create_option(self, name: Any, value: Any, label: Any, selected: Any, index: Any, subindex: Optional[Any] = ..., attrs: Optional[Any] = ...): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def id_for_label(self, id_: Any, index: str = ...): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def format_value(self, value: Any): ...

class Select(ChoiceWidget):
    input_type: str = ...
    template_name: str = ...
    option_template_name: str = ...
    add_id_index: bool = ...
    checked_attribute: Any = ...
    option_inherits_attrs: bool = ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def use_required_attribute(self, initial: Any): ...

class NullBooleanSelect(Select):
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def format_value(self, value: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...

class SelectMultiple(Select):
    allow_multiple_selected: bool = ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...

class RadioSelect(ChoiceWidget):
    input_type: str = ...
    template_name: str = ...
    option_template_name: str = ...

class CheckboxSelectMultiple(ChoiceWidget):
    allow_multiple_selected: bool = ...
    input_type: str = ...
    template_name: str = ...
    option_template_name: str = ...
    def use_required_attribute(self, initial: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...
    def id_for_label(self, id_: Any, index: Optional[Any] = ...): ...

class MultiWidget(Widget):
    template_name: str = ...
    widgets: Any = ...
    def __init__(self, widgets: Any, attrs: Optional[Any] = ...) -> None: ...
    @property
    def is_hidden(self): ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def id_for_label(self, id_: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...
    def decompress(self, value: Any) -> None: ...
    media: Any = ...
    def __deepcopy__(self, memo: Any): ...
    @property
    def needs_multipart_form(self): ...

class SplitDateTimeWidget(MultiWidget):
    supports_microseconds: bool = ...
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ..., date_format: Optional[Any] = ..., time_format: Optional[Any] = ..., date_attrs: Optional[Any] = ..., time_attrs: Optional[Any] = ...) -> None: ...
    def decompress(self, value: Any): ...

class SplitHiddenDateTimeWidget(SplitDateTimeWidget):
    template_name: str = ...
    def __init__(self, attrs: Optional[Any] = ..., date_format: Optional[Any] = ..., time_format: Optional[Any] = ..., date_attrs: Optional[Any] = ..., time_attrs: Optional[Any] = ...) -> None: ...

class SelectDateWidget(Widget):
    none_value: Any = ...
    month_field: str = ...
    day_field: str = ...
    year_field: str = ...
    template_name: str = ...
    input_type: str = ...
    select_widget: Any = ...
    date_re: Any = ...
    attrs: Any = ...
    years: Any = ...
    months: Any = ...
    year_none_value: Any = ...
    month_none_value: Any = ...
    day_none_value: Any = ...
    def __init__(self, attrs: Optional[Any] = ..., years: Optional[Any] = ..., months: Optional[Any] = ..., empty_label: Optional[Any] = ...) -> None: ...
    def get_context(self, name: Any, value: Any, attrs: Any): ...
    def format_value(self, value: Any): ...
    def id_for_label(self, id_: Any): ...
    def value_from_datadict(self, data: Any, files: Any, name: Any): ...
    def value_omitted_from_data(self, data: Any, files: Any, name: Any): ...

# Stubs for django.test.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.handlers.base import BaseHandler
from typing import Any, Optional

class RedirectCycleError(Exception):
    last_response: Any = ...
    redirect_chain: Any = ...
    def __init__(self, message: Any, last_response: Any) -> None: ...

class FakePayload:
    read_started: bool = ...
    def __init__(self, content: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def read(self, num_bytes: Optional[Any] = ...): ...
    def write(self, content: Any) -> None: ...

class ClientHandler(BaseHandler):
    enforce_csrf_checks: Any = ...
    def __init__(self, enforce_csrf_checks: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, environ: Any): ...

def encode_multipart(boundary: Any, data: Any): ...
def encode_file(boundary: Any, key: Any, file: Any): ...

class RequestFactory:
    json_encoder: Any = ...
    defaults: Any = ...
    cookies: Any = ...
    errors: Any = ...
    def __init__(self, *, json_encoder: Any = ..., **defaults: Any) -> None: ...
    def request(self, **request: Any): ...
    def get(self, path: Any, data: Optional[Any] = ..., secure: bool = ..., **extra: Any): ...
    def post(self, path: Any, data: Optional[Any] = ..., content_type: Any = ..., secure: bool = ..., **extra: Any): ...
    def head(self, path: Any, data: Optional[Any] = ..., secure: bool = ..., **extra: Any): ...
    def trace(self, path: Any, secure: bool = ..., **extra: Any): ...
    def options(self, path: Any, data: str = ..., content_type: str = ..., secure: bool = ..., **extra: Any): ...
    def put(self, path: Any, data: str = ..., content_type: str = ..., secure: bool = ..., **extra: Any): ...
    def patch(self, path: Any, data: str = ..., content_type: str = ..., secure: bool = ..., **extra: Any): ...
    def delete(self, path: Any, data: str = ..., content_type: str = ..., secure: bool = ..., **extra: Any): ...
    def generic(self, method: Any, path: Any, data: str = ..., content_type: str = ..., secure: bool = ..., **extra: Any): ...

class Client(RequestFactory):
    handler: Any = ...
    exc_info: Any = ...
    def __init__(self, enforce_csrf_checks: bool = ..., **defaults: Any) -> None: ...
    def store_exc_info(self, **kwargs: Any) -> None: ...
    @property
    def session(self): ...
    def request(self, **request: Any): ...
    def get(self, path: Any, data: Optional[Any] = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def post(self, path: Any, data: Optional[Any] = ..., content_type: Any = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def head(self, path: Any, data: Optional[Any] = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def options(self, path: Any, data: str = ..., content_type: str = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def put(self, path: Any, data: str = ..., content_type: str = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def patch(self, path: Any, data: str = ..., content_type: str = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def delete(self, path: Any, data: str = ..., content_type: str = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def trace(self, path: Any, data: str = ..., follow: bool = ..., secure: bool = ..., **extra: Any): ...
    def login(self, **credentials: Any): ...
    def force_login(self, user: Any, backend: Optional[Any] = ...): ...
    cookies: Any = ...
    def logout(self) -> None: ...

# Stubs for django.test.runner (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import unittest
from typing import Any, Optional

class DebugSQLTextTestResult(unittest.TextTestResult):
    logger: Any = ...
    def __init__(self, stream: Any, descriptions: Any, verbosity: Any) -> None: ...
    debug_sql_stream: Any = ...
    handler: Any = ...
    def startTest(self, test: Any) -> None: ...
    def stopTest(self, test: Any) -> None: ...
    def addError(self, test: Any, err: Any) -> None: ...
    def addFailure(self, test: Any, err: Any) -> None: ...
    def addSubTest(self, test: Any, subtest: Any, err: Any) -> None: ...
    def printErrorList(self, flavour: Any, errors: Any) -> None: ...

class RemoteTestResult:
    events: Any = ...
    failfast: bool = ...
    shouldStop: bool = ...
    testsRun: int = ...
    def __init__(self) -> None: ...
    @property
    def test_index(self): ...
    def check_picklable(self, test: Any, err: Any) -> None: ...
    def check_subtest_picklable(self, test: Any, subtest: Any) -> None: ...
    def stop_if_failfast(self) -> None: ...
    def stop(self) -> None: ...
    def startTestRun(self) -> None: ...
    def stopTestRun(self) -> None: ...
    def startTest(self, test: Any) -> None: ...
    def stopTest(self, test: Any) -> None: ...
    def addError(self, test: Any, err: Any) -> None: ...
    def addFailure(self, test: Any, err: Any) -> None: ...
    def addSubTest(self, test: Any, subtest: Any, err: Any) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addExpectedFailure(self, test: Any, err: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any) -> None: ...

class RemoteTestRunner:
    resultclass: Any = ...
    failfast: Any = ...
    def __init__(self, failfast: bool = ..., resultclass: Optional[Any] = ...) -> None: ...
    def run(self, test: Any): ...

def default_test_processes(): ...

class ParallelTestSuite(unittest.TestSuite):
    init_worker: Any = ...
    run_subsuite: Any = ...
    runner_class: Any = ...
    subsuites: Any = ...
    processes: Any = ...
    failfast: Any = ...
    def __init__(self, suite: Any, processes: Any, failfast: bool = ...) -> None: ...
    def run(self, result: Any): ...

class DiscoverRunner:
    test_suite: Any = ...
    parallel_test_suite: Any = ...
    test_runner: Any = ...
    test_loader: Any = ...
    reorder_by: Any = ...
    pattern: Any = ...
    top_level: Any = ...
    verbosity: Any = ...
    interactive: Any = ...
    failfast: Any = ...
    keepdb: Any = ...
    reverse: Any = ...
    debug_mode: Any = ...
    debug_sql: Any = ...
    parallel: Any = ...
    tags: Any = ...
    exclude_tags: Any = ...
    def __init__(self, pattern: Optional[Any] = ..., top_level: Optional[Any] = ..., verbosity: int = ..., interactive: bool = ..., failfast: bool = ..., keepdb: bool = ..., reverse: bool = ..., debug_mode: bool = ..., debug_sql: bool = ..., parallel: int = ..., tags: Optional[Any] = ..., exclude_tags: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @classmethod
    def add_arguments(cls, parser: Any) -> None: ...
    def setup_test_environment(self, **kwargs: Any) -> None: ...
    def build_suite(self, test_labels: Optional[Any] = ..., extra_tests: Optional[Any] = ..., **kwargs: Any): ...
    def setup_databases(self, **kwargs: Any): ...
    def get_resultclass(self): ...
    def get_test_runner_kwargs(self): ...
    def run_checks(self) -> None: ...
    def run_suite(self, suite: Any, **kwargs: Any): ...
    def teardown_databases(self, old_config: Any, **kwargs: Any) -> None: ...
    def teardown_test_environment(self, **kwargs: Any) -> None: ...
    def suite_result(self, suite: Any, result: Any, **kwargs: Any): ...
    def run_tests(self, test_labels: Any, extra_tests: Optional[Any] = ..., **kwargs: Any): ...

def is_discoverable(label: Any): ...
def reorder_suite(suite: Any, classes: Any, reverse: bool = ...): ...
def partition_suite_by_type(suite: Any, classes: Any, bins: Any, reverse: bool = ...) -> None: ...
def partition_suite_by_case(suite: Any): ...
def filter_tests_by_tags(suite: Any, tags: Any, exclude_tags: Any): ...

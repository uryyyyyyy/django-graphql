# Stubs for django.test.utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Approximate:
    val: Any = ...
    places: Any = ...
    def __init__(self, val: Any, places: int = ...) -> None: ...
    def __eq__(self, other: Any): ...

class ContextList(list):
    def __getitem__(self, key: Any): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __contains__(self, key: Any): ...
    def keys(self): ...

class _TestState: ...

def setup_test_environment(debug: Optional[Any] = ...) -> None: ...
def teardown_test_environment() -> None: ...
def get_runner(settings: Any, test_runner_class: Optional[Any] = ...): ...

class TestContextDecorator:
    attr_name: Any = ...
    kwarg_name: Any = ...
    def __init__(self, attr_name: Optional[Any] = ..., kwarg_name: Optional[Any] = ...) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def decorate_class(self, cls: Any): ...
    def decorate_callable(self, func: Any): ...
    def __call__(self, decorated: Any): ...

class override_settings(TestContextDecorator):
    options: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    wrapped: Any = ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def save_options(self, test_func: Any) -> None: ...
    def decorate_class(self, cls: Any): ...

class modify_settings(override_settings):
    operations: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def save_options(self, test_func: Any) -> None: ...
    options: Any = ...
    def enable(self) -> None: ...

class override_system_checks(TestContextDecorator):
    registry: Any = ...
    new_checks: Any = ...
    deployment_checks: Any = ...
    def __init__(self, new_checks: Any, deployment_checks: Optional[Any] = ...) -> None: ...
    old_checks: Any = ...
    old_deployment_checks: Any = ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...

class CaptureQueriesContext:
    connection: Any = ...
    def __init__(self, connection: Any) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, index: Any): ...
    def __len__(self): ...
    @property
    def captured_queries(self): ...
    force_debug_cursor: Any = ...
    initial_queries: Any = ...
    final_queries: Any = ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class ignore_warnings(TestContextDecorator):
    ignore_kwargs: Any = ...
    filter_func: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    catch_warnings: Any = ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...

requires_tz_support: Any

def isolate_lru_cache(lru_cache_object: Any) -> None: ...

class override_script_prefix(TestContextDecorator):
    prefix: Any = ...
    def __init__(self, prefix: Any) -> None: ...
    old_prefix: Any = ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...

class LoggingCaptureMixin:
    logger: Any = ...
    old_stream: Any = ...
    logger_output: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class isolate_apps(TestContextDecorator):
    installed_apps: Any = ...
    def __init__(self, *installed_apps: Any, **kwargs: Any) -> None: ...
    old_apps: Any = ...
    def enable(self): ...
    def disable(self) -> None: ...

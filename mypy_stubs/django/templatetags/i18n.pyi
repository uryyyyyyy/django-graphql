# Stubs for django.templatetags.i18n (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.template import Node
from typing import Any, Optional

register: Any

class GetAvailableLanguagesNode(Node):
    variable: Any = ...
    def __init__(self, variable: Any) -> None: ...
    def render(self, context: Any): ...

class GetLanguageInfoNode(Node):
    lang_code: Any = ...
    variable: Any = ...
    def __init__(self, lang_code: Any, variable: Any) -> None: ...
    def render(self, context: Any): ...

class GetLanguageInfoListNode(Node):
    languages: Any = ...
    variable: Any = ...
    def __init__(self, languages: Any, variable: Any) -> None: ...
    def get_language_info(self, language: Any): ...
    def render(self, context: Any): ...

class GetCurrentLanguageNode(Node):
    variable: Any = ...
    def __init__(self, variable: Any) -> None: ...
    def render(self, context: Any): ...

class GetCurrentLanguageBidiNode(Node):
    variable: Any = ...
    def __init__(self, variable: Any) -> None: ...
    def render(self, context: Any): ...

class TranslateNode(Node):
    noop: Any = ...
    asvar: Any = ...
    message_context: Any = ...
    filter_expression: Any = ...
    def __init__(self, filter_expression: Any, noop: Any, asvar: Optional[Any] = ..., message_context: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

class BlockTranslateNode(Node):
    extra_context: Any = ...
    singular: Any = ...
    plural: Any = ...
    countervar: Any = ...
    counter: Any = ...
    message_context: Any = ...
    trimmed: Any = ...
    asvar: Any = ...
    def __init__(self, extra_context: Any, singular: Any, plural: Optional[Any] = ..., countervar: Optional[Any] = ..., counter: Optional[Any] = ..., message_context: Optional[Any] = ..., trimmed: bool = ..., asvar: Optional[Any] = ...) -> None: ...
    def render_token_list(self, tokens: Any): ...
    def render(self, context: Any, nested: bool = ...): ...

class LanguageNode(Node):
    nodelist: Any = ...
    language: Any = ...
    def __init__(self, nodelist: Any, language: Any) -> None: ...
    def render(self, context: Any): ...

def do_get_available_languages(parser: Any, token: Any): ...
def do_get_language_info(parser: Any, token: Any): ...
def do_get_language_info_list(parser: Any, token: Any): ...
def language_name(lang_code: Any): ...
def language_name_translated(lang_code: Any): ...
def language_name_local(lang_code: Any): ...
def language_bidi(lang_code: Any): ...
def do_get_current_language(parser: Any, token: Any): ...
def do_get_current_language_bidi(parser: Any, token: Any): ...
def do_translate(parser: Any, token: Any): ...
def do_block_translate(parser: Any, token: Any): ...
def language(parser: Any, token: Any): ...

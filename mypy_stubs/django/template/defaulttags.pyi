# Stubs for django.template.defaulttags (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START, Context, FILTER_SEPARATOR, Node, NodeList, SINGLE_BRACE_END, SINGLE_BRACE_START, TemplateSyntaxError, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, VariableDoesNotExist, kwarg_re, render_value_in_context, token_kwargs
from .defaultfilters import date
from .library import Library
from .smartif import IfParser, Literal
from collections import namedtuple
from typing import Any, Optional

register: Any

class AutoEscapeControlNode(Node):
    def __init__(self, setting: Any, nodelist: Any) -> None: ...
    def render(self, context: Any): ...

class CommentNode(Node):
    def render(self, context: Any): ...

class CsrfTokenNode(Node):
    def render(self, context: Any): ...

class CycleNode(Node):
    cyclevars: Any = ...
    variable_name: Any = ...
    silent: Any = ...
    def __init__(self, cyclevars: Any, variable_name: Optional[Any] = ..., silent: bool = ...) -> None: ...
    def render(self, context: Any): ...
    def reset(self, context: Any) -> None: ...

class DebugNode(Node):
    def render(self, context: Any): ...

class FilterNode(Node):
    def __init__(self, filter_expr: Any, nodelist: Any) -> None: ...
    def render(self, context: Any): ...

class FirstOfNode(Node):
    vars: Any = ...
    asvar: Any = ...
    def __init__(self, variables: Any, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

class ForNode(Node):
    child_nodelists: Any = ...
    is_reversed: Any = ...
    nodelist_loop: Any = ...
    nodelist_empty: Any = ...
    def __init__(self, loopvars: Any, sequence: Any, is_reversed: Any, nodelist_loop: Any, nodelist_empty: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

class IfChangedNode(Node):
    child_nodelists: Any = ...
    def __init__(self, nodelist_true: Any, nodelist_false: Any, *varlist: Any) -> None: ...
    def render(self, context: Any): ...

class IfEqualNode(Node):
    child_nodelists: Any = ...
    negate: Any = ...
    def __init__(self, var1: Any, var2: Any, nodelist_true: Any, nodelist_false: Any, negate: Any) -> None: ...
    def render(self, context: Any): ...

class IfNode(Node):
    conditions_nodelists: Any = ...
    def __init__(self, conditions_nodelists: Any) -> None: ...
    def __iter__(self) -> None: ...
    @property
    def nodelist(self): ...
    def render(self, context: Any): ...

class LoremNode(Node):
    def __init__(self, count: Any, method: Any, common: Any) -> None: ...
    def render(self, context: Any): ...

GroupedResult = namedtuple('GroupedResult', ['grouper', 'list'])

class RegroupNode(Node):
    var_name: Any = ...
    def __init__(self, target: Any, expression: Any, var_name: Any) -> None: ...
    def resolve_expression(self, obj: Any, context: Any): ...
    def render(self, context: Any): ...

class LoadNode(Node):
    def render(self, context: Any): ...

class NowNode(Node):
    format_string: Any = ...
    asvar: Any = ...
    def __init__(self, format_string: Any, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

class ResetCycleNode(Node):
    node: Any = ...
    def __init__(self, node: Any) -> None: ...
    def render(self, context: Any): ...

class SpacelessNode(Node):
    nodelist: Any = ...
    def __init__(self, nodelist: Any) -> None: ...
    def render(self, context: Any): ...

class TemplateTagNode(Node):
    mapping: Any = ...
    tagtype: Any = ...
    def __init__(self, tagtype: Any) -> None: ...
    def render(self, context: Any): ...

class URLNode(Node):
    view_name: Any = ...
    args: Any = ...
    kwargs: Any = ...
    asvar: Any = ...
    def __init__(self, view_name: Any, args: Any, kwargs: Any, asvar: Any) -> None: ...
    def render(self, context: Any): ...

class VerbatimNode(Node):
    content: Any = ...
    def __init__(self, content: Any) -> None: ...
    def render(self, context: Any): ...

class WidthRatioNode(Node):
    val_expr: Any = ...
    max_expr: Any = ...
    max_width: Any = ...
    asvar: Any = ...
    def __init__(self, val_expr: Any, max_expr: Any, max_width: Any, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

class WithNode(Node):
    nodelist: Any = ...
    extra_context: Any = ...
    def __init__(self, var: Any, name: Any, nodelist: Any, extra_context: Optional[Any] = ...) -> None: ...
    def render(self, context: Any): ...

def autoescape(parser: Any, token: Any): ...
def comment(parser: Any, token: Any): ...
def cycle(parser: Any, token: Any): ...
def csrf_token(parser: Any, token: Any): ...
def debug(parser: Any, token: Any): ...
def do_filter(parser: Any, token: Any): ...
def firstof(parser: Any, token: Any): ...
def do_for(parser: Any, token: Any): ...
def do_ifequal(parser: Any, token: Any, negate: Any): ...
def ifequal(parser: Any, token: Any): ...
def ifnotequal(parser: Any, token: Any): ...

class TemplateLiteral(Literal):
    value: Any = ...
    text: Any = ...
    def __init__(self, value: Any, text: Any) -> None: ...
    def display(self): ...
    def eval(self, context: Any): ...

class TemplateIfParser(IfParser):
    error_class: Any = ...
    template_parser: Any = ...
    def __init__(self, parser: Any, *args: Any, **kwargs: Any) -> None: ...
    def create_var(self, value: Any): ...

def do_if(parser: Any, token: Any): ...
def ifchanged(parser: Any, token: Any): ...
def find_library(parser: Any, name: Any): ...
def load_from_library(library: Any, label: Any, names: Any): ...
def load(parser: Any, token: Any): ...
def lorem(parser: Any, token: Any): ...
def now(parser: Any, token: Any): ...
def regroup(parser: Any, token: Any): ...
def resetcycle(parser: Any, token: Any): ...
def spaceless(parser: Any, token: Any): ...
def templatetag(parser: Any, token: Any): ...
def url(parser: Any, token: Any): ...
def verbatim(parser: Any, token: Any): ...
def widthratio(parser: Any, token: Any): ...
def do_with(parser: Any, token: Any): ...

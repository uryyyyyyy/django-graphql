# Stubs for django.template.engine (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import Context, Template
from .context import _builtin_context_processors
from .exceptions import TemplateDoesNotExist
from .library import import_library
from typing import Any, Optional

class Engine:
    default_builtins: Any = ...
    dirs: Any = ...
    app_dirs: Any = ...
    autoescape: Any = ...
    context_processors: Any = ...
    debug: Any = ...
    loaders: Any = ...
    string_if_invalid: Any = ...
    file_charset: Any = ...
    libraries: Any = ...
    template_libraries: Any = ...
    builtins: Any = ...
    template_builtins: Any = ...
    def __init__(self, dirs: Optional[Any] = ..., app_dirs: bool = ..., context_processors: Optional[Any] = ..., debug: bool = ..., loaders: Optional[Any] = ..., string_if_invalid: str = ..., file_charset: str = ..., libraries: Optional[Any] = ..., builtins: Optional[Any] = ..., autoescape: bool = ...) -> None: ...
    @staticmethod
    def get_default(): ...
    def template_context_processors(self): ...
    def get_template_builtins(self, builtins: Any): ...
    def get_template_libraries(self, libraries: Any): ...
    def template_loaders(self): ...
    def get_template_loaders(self, template_loaders: Any): ...
    def find_template_loader(self, loader: Any): ...
    def find_template(self, name: Any, dirs: Optional[Any] = ..., skip: Optional[Any] = ...): ...
    def from_string(self, template_code: Any): ...
    def get_template(self, template_name: Any): ...
    def render_to_string(self, template_name: Any, context: Optional[Any] = ...): ...
    def select_template(self, template_name_list: Any): ...

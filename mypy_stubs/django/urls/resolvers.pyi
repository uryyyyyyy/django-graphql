# Stubs for django.urls.resolvers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .converters import get_converter
from .exceptions import NoReverseMatch, Resolver404
from .utils import get_callable
from typing import Any, Optional

class ResolverMatch:
    func: Any = ...
    args: Any = ...
    kwargs: Any = ...
    url_name: Any = ...
    app_names: Any = ...
    app_name: Any = ...
    namespaces: Any = ...
    namespace: Any = ...
    view_name: Any = ...
    def __init__(self, func: Any, args: Any, kwargs: Any, url_name: Optional[Any] = ..., app_names: Optional[Any] = ..., namespaces: Optional[Any] = ...) -> None: ...
    def __getitem__(self, index: Any): ...

def get_resolver(urlconf: Optional[Any] = ...): ...
def get_ns_resolver(ns_pattern: Any, resolver: Any, converters: Any): ...

class LocaleRegexDescriptor:
    attr: Any = ...
    def __init__(self, attr: Any) -> None: ...
    def __get__(self, instance: Any, cls: Optional[Any] = ...): ...

class CheckURLMixin:
    def describe(self): ...

class RegexPattern(CheckURLMixin):
    regex: Any = ...
    name: Any = ...
    converters: Any = ...
    def __init__(self, regex: Any, name: Optional[Any] = ..., is_endpoint: bool = ...) -> None: ...
    def match(self, path: Any): ...
    def check(self): ...

class RoutePattern(CheckURLMixin):
    regex: Any = ...
    name: Any = ...
    converters: Any = ...
    def __init__(self, route: Any, name: Optional[Any] = ..., is_endpoint: bool = ...) -> None: ...
    def match(self, path: Any): ...
    def check(self): ...

class LocalePrefixPattern:
    prefix_default_language: Any = ...
    converters: Any = ...
    def __init__(self, prefix_default_language: bool = ...) -> None: ...
    @property
    def regex(self): ...
    @property
    def language_prefix(self): ...
    def match(self, path: Any): ...
    def check(self): ...
    def describe(self): ...

class URLPattern:
    pattern: Any = ...
    callback: Any = ...
    default_args: Any = ...
    name: Any = ...
    def __init__(self, pattern: Any, callback: Any, default_args: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def check(self): ...
    def resolve(self, path: Any): ...
    def lookup_str(self): ...

class URLResolver:
    pattern: Any = ...
    urlconf_name: Any = ...
    callback: Any = ...
    default_kwargs: Any = ...
    namespace: Any = ...
    app_name: Any = ...
    def __init__(self, pattern: Any, urlconf_name: Any, default_kwargs: Optional[Any] = ..., app_name: Optional[Any] = ..., namespace: Optional[Any] = ...) -> None: ...
    def check(self): ...
    @property
    def reverse_dict(self): ...
    @property
    def namespace_dict(self): ...
    @property
    def app_dict(self): ...
    def resolve(self, path: Any): ...
    def urlconf_module(self): ...
    def url_patterns(self): ...
    def resolve_error_handler(self, view_type: Any): ...
    def reverse(self, lookup_view: Any, *args: Any, **kwargs: Any): ...

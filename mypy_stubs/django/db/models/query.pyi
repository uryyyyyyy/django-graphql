# Stubs for django.db.models.query (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models import sql
from typing import Any, Optional
from django.db.models.query_utils import FilteredRelation, InvalidQuery, Q as Q

REPR_OUTPUT_SIZE: int
EmptyResultSet = sql.EmptyResultSet

class BaseIterable:
    queryset: Any = ...
    chunked_fetch: Any = ...
    chunk_size: Any = ...
    def __init__(self, queryset: Any, chunked_fetch: bool = ..., chunk_size: Any = ...) -> None: ...

class ModelIterable(BaseIterable):
    def __iter__(self) -> None: ...

class ValuesIterable(BaseIterable):
    def __iter__(self) -> None: ...

class ValuesListIterable(BaseIterable):
    def __iter__(self): ...

class NamedValuesListIterable(ValuesListIterable):
    @staticmethod
    def create_namedtuple_class(*names: Any): ...
    def __iter__(self) -> None: ...

class FlatValuesListIterable(BaseIterable):
    def __iter__(self) -> None: ...

class QuerySet:
    model: Any = ...
    query: Any = ...
    def __init__(self, model: Optional[Any] = ..., query: Optional[Any] = ..., using: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def as_manager(cls): ...
    as_manager: Any = ...  # type: ignore
    def __deepcopy__(self, memo: Any): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __bool__(self): ...
    def __getitem__(self, k: Any): ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def iterator(self, chunk_size: int = ...): ...
    def aggregate(self, *args: Any, **kwargs: Any): ...
    def count(self): ...
    def get(self, *args: Any, **kwargs: Any): ...
    def create(self, **kwargs: Any): ...
    def bulk_create(self, objs: Any, batch_size: Optional[Any] = ...): ...
    def get_or_create(self, defaults: Optional[Any] = ..., **kwargs: Any): ...
    def update_or_create(self, defaults: Optional[Any] = ..., **kwargs: Any): ...
    def earliest(self, *fields: Any, field_name: Optional[Any] = ...): ...
    def latest(self, *fields: Any, field_name: Optional[Any] = ...): ...
    def first(self): ...
    def last(self): ...
    def in_bulk(self, id_list: Optional[Any] = ..., *, field_name: str = ...): ...
    def delete(self): ...
    def update(self, **kwargs: Any): ...
    def exists(self): ...
    def explain(self, *, format: Optional[Any] = ..., **options: Any): ...
    def raw(self, raw_query: Any, params: Optional[Any] = ..., translations: Optional[Any] = ..., using: Optional[Any] = ...): ...
    def values(self, *fields: Any, **expressions: Any): ...
    def values_list(self, *fields: Any, flat: bool = ..., named: bool = ...): ...
    def dates(self, field_name: Any, kind: Any, order: str = ...): ...
    def datetimes(self, field_name: Any, kind: Any, order: str = ..., tzinfo: Optional[Any] = ...): ...
    def none(self): ...
    def all(self): ...
    def filter(self, *args: Any, **kwargs: Any): ...
    def exclude(self, *args: Any, **kwargs: Any): ...
    def complex_filter(self, filter_obj: Any): ...
    def union(self, *other_qs: Any, all: bool = ...): ...
    def intersection(self, *other_qs: Any): ...
    def difference(self, *other_qs: Any): ...
    def select_for_update(self, nowait: bool = ..., skip_locked: bool = ..., of: Any = ...): ...
    def select_related(self, *fields: Any): ...
    def prefetch_related(self, *lookups: Any): ...
    def annotate(self, *args: Any, **kwargs: Any): ...
    def order_by(self, *field_names: Any): ...
    def distinct(self, *field_names: Any): ...
    def extra(self, select: Optional[Any] = ..., where: Optional[Any] = ..., params: Optional[Any] = ..., tables: Optional[Any] = ..., order_by: Optional[Any] = ..., select_params: Optional[Any] = ...): ...
    def reverse(self): ...
    def defer(self, *fields: Any): ...
    def only(self, *fields: Any): ...
    def using(self, alias: Any): ...
    @property
    def ordered(self): ...
    @property
    def db(self): ...
    def resolve_expression(self, *args: Any, **kwargs: Any): ...

class InstanceCheckMeta(type):
    def __instancecheck__(self, instance: Any): ...

class EmptyQuerySet(metaclass=InstanceCheckMeta):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class RawQuerySet:
    raw_query: Any = ...
    model: Any = ...
    query: Any = ...
    params: Any = ...
    translations: Any = ...
    def __init__(self, raw_query: Any, model: Optional[Any] = ..., query: Optional[Any] = ..., params: Optional[Any] = ..., translations: Optional[Any] = ..., using: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def resolve_model_init_order(self): ...
    def prefetch_related(self, *lookups: Any): ...
    def __len__(self): ...
    def __bool__(self): ...
    def __iter__(self): ...
    def iterator(self) -> None: ...
    def __getitem__(self, k: Any): ...
    @property
    def db(self): ...
    def using(self, alias: Any): ...
    def columns(self): ...
    def model_fields(self): ...

class Prefetch:
    prefetch_through: Any = ...
    prefetch_to: Any = ...
    queryset: Any = ...
    to_attr: Any = ...
    def __init__(self, lookup: Any, queryset: Optional[Any] = ..., to_attr: Optional[Any] = ...) -> None: ...
    def add_prefix(self, prefix: Any) -> None: ...
    def get_current_prefetch_to(self, level: Any): ...
    def get_current_to_attr(self, level: Any): ...
    def get_current_queryset(self, level: Any): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

def normalize_prefetch_lookups(lookups: Any, prefix: Optional[Any] = ...): ...
def prefetch_related_objects(model_instances: Any, *related_lookups: Any) -> None: ...
def get_prefetcher(instance: Any, through_attr: Any, to_attr: Any): ...
def prefetch_one_level(instances: Any, prefetcher: Any, lookup: Any, level: Any): ...

class RelatedPopulator:
    db: Any = ...
    cols_start: Any = ...
    cols_end: Any = ...
    init_list: Any = ...
    reorder_for_init: Any = ...
    model_cls: Any = ...
    pk_idx: Any = ...
    related_populators: Any = ...
    local_setter: Any = ...
    remote_setter: Any = ...
    def __init__(self, klass_info: Any, select: Any, db: Any) -> None: ...
    def populate(self, row: Any, from_obj: Any) -> None: ...

def get_related_populators(klass_info: Any, select: Any, db: Any): ...

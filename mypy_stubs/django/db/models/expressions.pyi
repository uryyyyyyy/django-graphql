# Stubs for django.db.models.expressions (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class SQLiteNumericMixin:
    def as_sqlite(self, compiler: Any, connection: Any, **extra_context: Any): ...

class Combinable:
    ADD: str = ...
    SUB: str = ...
    MUL: str = ...
    DIV: str = ...
    POW: str = ...
    MOD: str = ...
    BITAND: str = ...
    BITOR: str = ...
    BITLEFTSHIFT: str = ...
    BITRIGHTSHIFT: str = ...
    def __neg__(self): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __pow__(self, other: Any): ...
    def __and__(self, other: Any) -> None: ...
    def bitand(self, other: Any): ...
    def bitleftshift(self, other: Any): ...
    def bitrightshift(self, other: Any): ...
    def __or__(self, other: Any) -> None: ...
    def bitor(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __rand__(self, other: Any) -> None: ...
    def __ror__(self, other: Any) -> None: ...

class BaseExpression:
    is_summary: bool = ...
    filterable: bool = ...
    window_compatible: bool = ...
    output_field: Any = ...
    def __init__(self, output_field: Optional[Any] = ...) -> None: ...
    def get_db_converters(self, connection: Any): ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any) -> None: ...
    def contains_aggregate(self): ...
    def contains_over_clause(self): ...
    def contains_column_references(self): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    @property
    def field(self): ...
    def convert_value(self): ...
    def get_lookup(self, lookup: Any): ...
    def get_transform(self, name: Any): ...
    def relabeled_clone(self, change_map: Any): ...
    def copy(self): ...
    def get_group_by_cols(self): ...
    def get_source_fields(self): ...
    def asc(self, **kwargs: Any): ...
    def desc(self, **kwargs: Any): ...
    def reverse_ordering(self): ...
    def flatten(self) -> None: ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

class Expression(BaseExpression, Combinable): ...

class CombinedExpression(SQLiteNumericMixin, Expression):
    connector: Any = ...
    lhs: Any = ...
    rhs: Any = ...
    def __init__(self, lhs: Any, connector: Any, rhs: Any, output_field: Optional[Any] = ...) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...

class DurationExpression(CombinedExpression):
    def compile(self, side: Any, compiler: Any, connection: Any): ...
    def as_sql(self, compiler: Any, connection: Any): ...

class TemporalSubtraction(CombinedExpression):
    output_field: Any = ...
    def __init__(self, lhs: Any, rhs: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...

class F(Combinable):
    filterable: bool = ...
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def asc(self, **kwargs: Any): ...
    def desc(self, **kwargs: Any): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

class ResolvedOuterRef(F):
    def as_sql(self, *args: Any, **kwargs: Any) -> None: ...
    def relabeled_clone(self, relabels: Any): ...

class OuterRef(F):
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...

class Func(SQLiteNumericMixin, Expression):
    function: Any = ...
    template: str = ...
    arg_joiner: str = ...
    arity: Any = ...
    source_expressions: Any = ...
    extra: Any = ...
    def __init__(self, *expressions: Any, output_field: Optional[Any] = ..., **extra: Any) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler: Any, connection: Any, function: Optional[Any] = ..., template: Optional[Any] = ..., arg_joiner: Optional[Any] = ..., **extra_context: Any): ...
    def copy(self): ...

class Value(Expression):
    value: Any = ...
    def __init__(self, value: Any, output_field: Optional[Any] = ...) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def get_group_by_cols(self): ...

class DurationValue(Value):
    def as_sql(self, compiler: Any, connection: Any): ...

class RawSQL(Expression):
    def __init__(self, sql: Any, params: Any, output_field: Optional[Any] = ...) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def get_group_by_cols(self): ...
    def __hash__(self): ...

class Star(Expression):
    def as_sql(self, compiler: Any, connection: Any): ...

class Random(Expression):
    output_field: Any = ...
    def as_sql(self, compiler: Any, connection: Any): ...

class Col(Expression):
    contains_column_references: bool = ...
    def __init__(self, alias: Any, target: Any, output_field: Optional[Any] = ...) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def relabeled_clone(self, relabels: Any): ...
    def get_group_by_cols(self): ...
    def get_db_converters(self, connection: Any): ...

class Ref(Expression):
    def __init__(self, refs: Any, source: Any) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def relabeled_clone(self, relabels: Any): ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def get_group_by_cols(self): ...

class ExpressionList(Func):
    template: str = ...
    def __init__(self, *expressions: Any, **extra: Any) -> None: ...

class ExpressionWrapper(Expression):
    expression: Any = ...
    def __init__(self, expression: Any, output_field: Any) -> None: ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def get_source_expressions(self): ...
    def as_sql(self, compiler: Any, connection: Any): ...

class When(Expression):
    template: str = ...
    condition: Any = ...
    result: Any = ...
    def __init__(self, condition: Optional[Any] = ..., then: Optional[Any] = ..., **lookups: Any) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def get_source_fields(self): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler: Any, connection: Any, template: Optional[Any] = ..., **extra_context: Any): ...
    def get_group_by_cols(self): ...

class Case(Expression):
    template: str = ...
    case_joiner: str = ...
    cases: Any = ...
    default: Any = ...
    extra: Any = ...
    def __init__(self, *cases: Any, default: Optional[Any] = ..., output_field: Optional[Any] = ..., **extra: Any) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def copy(self): ...
    def as_sql(self, compiler: Any, connection: Any, template: Optional[Any] = ..., case_joiner: Optional[Any] = ..., **extra_context: Any): ...

class Subquery(Expression):
    template: str = ...
    queryset: Any = ...
    extra: Any = ...
    def __init__(self, queryset: Any, output_field: Optional[Any] = ..., **extra: Any) -> None: ...
    def copy(self): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def get_source_expressions(self): ...
    def relabeled_clone(self, change_map: Any): ...
    def as_sql(self, compiler: Any, connection: Any, template: Optional[Any] = ..., **extra_context: Any): ...

class Exists(Subquery):
    template: str = ...
    output_field: Any = ...
    negated: Any = ...
    def __init__(self, *args: Any, negated: bool = ..., **kwargs: Any) -> None: ...
    def __invert__(self): ...
    queryset: Any = ...
    def resolve_expression(self, query: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def as_sql(self, compiler: Any, connection: Any, template: Optional[Any] = ..., **extra_context: Any): ...
    def as_oracle(self, compiler: Any, connection: Any, template: Optional[Any] = ..., **extra_context: Any): ...

class OrderBy(BaseExpression):
    template: str = ...
    nulls_first: Any = ...
    nulls_last: Any = ...
    descending: Any = ...
    expression: Any = ...
    def __init__(self, expression: Any, descending: bool = ..., nulls_first: bool = ..., nulls_last: bool = ...) -> None: ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def get_source_expressions(self): ...
    def as_sql(self, compiler: Any, connection: Any, template: Optional[Any] = ..., **extra_context: Any): ...
    def as_sqlite(self, compiler: Any, connection: Any): ...
    def as_mysql(self, compiler: Any, connection: Any): ...
    def get_group_by_cols(self): ...
    def reverse_ordering(self): ...
    def asc(self, **kwargs: Any) -> Any: ...
    def desc(self, **kwargs: Any) -> Any: ...

class Window(Expression):
    template: str = ...
    contains_aggregate: bool = ...
    contains_over_clause: bool = ...
    filterable: bool = ...
    partition_by: Any = ...
    order_by: Any = ...
    frame: Any = ...
    source_expression: Any = ...
    def __init__(self, expression: Any, partition_by: Optional[Any] = ..., order_by: Optional[Any] = ..., frame: Optional[Any] = ..., output_field: Optional[Any] = ...) -> None: ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any, function: Optional[Any] = ..., template: Optional[Any] = ...): ...
    def get_group_by_cols(self): ...

class WindowFrame(Expression):
    template: str = ...
    start: Any = ...
    end: Any = ...
    def __init__(self, start: Optional[Any] = ..., end: Optional[Any] = ...) -> None: ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def get_source_expressions(self): ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def get_group_by_cols(self): ...
    def window_frame_start_end(self, connection: Any, start: Any, end: Any) -> None: ...

class RowRange(WindowFrame):
    frame_type: str = ...
    def window_frame_start_end(self, connection: Any, start: Any, end: Any): ...

class ValueRange(WindowFrame):
    frame_type: str = ...
    def window_frame_start_end(self, connection: Any, start: Any, end: Any): ...

# Stubs for django.db.models.fields.reverse_related (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .mixins import FieldCacheMixin
from typing import Any, Optional

class ForeignObjectRel(FieldCacheMixin):
    auto_created: bool = ...
    concrete: bool = ...
    editable: bool = ...
    is_relation: bool = ...
    null: bool = ...
    field: Any = ...
    model: Any = ...
    related_name: Any = ...
    related_query_name: Any = ...
    limit_choices_to: Any = ...
    parent_link: Any = ...
    on_delete: Any = ...
    symmetrical: bool = ...
    multiple: bool = ...
    def __init__(self, field: Any, to: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...
    def hidden(self): ...
    def name(self): ...
    @property
    def remote_field(self): ...
    @property
    def target_field(self): ...
    def related_model(self): ...
    def many_to_many(self): ...
    def many_to_one(self): ...
    def one_to_many(self): ...
    def one_to_one(self): ...
    def get_lookup(self, lookup_name: Any): ...
    def get_internal_type(self): ...
    @property
    def db_type(self): ...
    def get_choices(self, include_blank: bool = ..., blank_choice: Any = ...): ...
    def is_hidden(self): ...
    def get_joining_columns(self): ...
    def get_extra_restriction(self, where_class: Any, alias: Any, related_alias: Any): ...
    field_name: Any = ...
    def set_field_name(self) -> None: ...
    def get_accessor_name(self, model: Optional[Any] = ...): ...
    def get_path_info(self, filtered_relation: Optional[Any] = ...): ...
    def get_cache_name(self): ...

class ManyToOneRel(ForeignObjectRel):
    field_name: Any = ...
    def __init__(self, field: Any, to: Any, field_name: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...
    def get_related_field(self): ...
    def set_field_name(self) -> None: ...

class OneToOneRel(ManyToOneRel):
    multiple: bool = ...
    def __init__(self, field: Any, to: Any, field_name: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...

class ManyToManyRel(ForeignObjectRel):
    through: Any = ...
    through_fields: Any = ...
    symmetrical: Any = ...
    db_constraint: Any = ...
    def __init__(self, field: Any, to: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., symmetrical: bool = ..., through: Optional[Any] = ..., through_fields: Optional[Any] = ..., db_constraint: bool = ...) -> None: ...
    def get_related_field(self): ...

# Stubs for django.db.models.fields.related (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import Field
from .mixins import FieldCacheMixin
from .related_descriptors import ForwardManyToOneDescriptor, ForwardOneToOneDescriptor, ManyToManyDescriptor, ReverseManyToOneDescriptor, ReverseOneToOneDescriptor
from .related_lookups import RelatedExact, RelatedGreaterThan, RelatedGreaterThanOrEqual, RelatedIn, RelatedIsNull, RelatedLessThan, RelatedLessThanOrEqual
from .reverse_related import ForeignObjectRel, ManyToManyRel as ManyToManyRel, ManyToOneRel as ManyToOneRel, OneToOneRel as OneToOneRel
from typing import Any, Optional

RECURSIVE_RELATIONSHIP_CONSTANT: str

def resolve_relation(scope_model: Any, relation: Any): ...
def lazy_related_operation(function: Any, model: Any, *related_models: Any, **kwargs: Any): ...

class RelatedField(FieldCacheMixin, Field):
    one_to_many: bool = ...
    one_to_one: bool = ...
    many_to_many: bool = ...
    many_to_one: bool = ...
    def related_model(self): ...
    def check(self, **kwargs: Any): ...
    def db_type(self, connection: Any) -> None: ...
    opts: Any = ...
    def contribute_to_class(self, cls: Any, name: Any, private_only: bool = ..., **kwargs: Any) -> None: ...
    def deconstruct(self): ...
    def get_forward_related_filter(self, obj: Any): ...
    def get_reverse_related_filter(self, obj: Any): ...
    @property
    def swappable_setting(self): ...
    name: Any = ...
    verbose_name: Any = ...
    def set_attributes_from_rel(self) -> None: ...
    def do_related_class(self, other: Any, cls: Any) -> None: ...
    def get_limit_choices_to(self): ...
    def formfield(self, **kwargs: Any): ...
    def related_query_name(self): ...
    @property
    def target_field(self): ...
    def get_cache_name(self): ...

class ForeignObject(RelatedField):
    many_to_many: bool = ...
    many_to_one: bool = ...
    one_to_many: bool = ...
    one_to_one: bool = ...
    requires_unique_target: bool = ...
    related_accessor_class: Any = ...
    forward_related_accessor_class: Any = ...
    rel_class: Any = ...
    from_fields: Any = ...
    to_fields: Any = ...
    swappable: Any = ...
    def __init__(self, to: Any, on_delete: Any, from_fields: Any, to_fields: Any, rel: Optional[Any] = ..., related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., swappable: bool = ..., **kwargs: Any) -> None: ...
    def check(self, **kwargs: Any): ...
    def deconstruct(self): ...
    def resolve_related_fields(self): ...
    @property
    def related_fields(self): ...
    @property
    def reverse_related_fields(self): ...
    @property
    def local_related_fields(self): ...
    @property
    def foreign_related_fields(self): ...
    def get_local_related_value(self, instance: Any): ...
    def get_foreign_related_value(self, instance: Any): ...
    @staticmethod
    def get_instance_value_for_fields(instance: Any, fields: Any): ...
    def get_attname_column(self): ...
    def get_joining_columns(self, reverse_join: bool = ...): ...
    def get_reverse_joining_columns(self): ...
    def get_extra_descriptor_filter(self, instance: Any): ...
    def get_extra_restriction(self, where_class: Any, alias: Any, related_alias: Any) -> None: ...
    def get_path_info(self, filtered_relation: Optional[Any] = ...): ...
    def get_reverse_path_info(self, filtered_relation: Optional[Any] = ...): ...
    @classmethod
    def get_lookups(cls): ...
    def contribute_to_class(self, cls: Any, name: Any, private_only: bool = ..., **kwargs: Any) -> None: ...
    def contribute_to_related_class(self, cls: Any, related: Any) -> None: ...

class ForeignKey(ForeignObject):
    many_to_many: bool = ...
    many_to_one: bool = ...
    one_to_many: bool = ...
    one_to_one: bool = ...
    rel_class: Any = ...
    empty_strings_allowed: bool = ...
    default_error_messages: Any = ...
    description: Any = ...
    db_constraint: Any = ...
    def __init__(self, to: Any, on_delete: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., to_field: Optional[Any] = ..., db_constraint: bool = ..., **kwargs: Any) -> None: ...
    def check(self, **kwargs: Any): ...
    def deconstruct(self): ...
    def to_python(self, value: Any): ...
    @property
    def target_field(self): ...
    def get_reverse_path_info(self, filtered_relation: Optional[Any] = ...): ...
    def validate(self, value: Any, model_instance: Any) -> None: ...
    def get_attname(self): ...
    def get_attname_column(self): ...
    def get_default(self): ...
    def get_db_prep_save(self, value: Any, connection: Any): ...
    def get_db_prep_value(self, value: Any, connection: Any, prepared: bool = ...): ...
    def contribute_to_related_class(self, cls: Any, related: Any) -> None: ...
    def formfield(self, *, using: Optional[Any] = ..., **kwargs: Any): ...
    def db_check(self, connection: Any): ...
    def db_type(self, connection: Any): ...
    def db_parameters(self, connection: Any): ...
    def convert_empty_strings(self, value: Any, expression: Any, connection: Any): ...
    def get_db_converters(self, connection: Any): ...
    def get_col(self, alias: Any, output_field: Optional[Any] = ...): ...

class OneToOneField(ForeignKey):
    many_to_many: bool = ...
    many_to_one: bool = ...
    one_to_many: bool = ...
    one_to_one: bool = ...
    related_accessor_class: Any = ...
    forward_related_accessor_class: Any = ...
    rel_class: Any = ...
    description: Any = ...
    def __init__(self, to: Any, on_delete: Any, to_field: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def deconstruct(self): ...
    def formfield(self, **kwargs: Any): ...
    def save_form_data(self, instance: Any, data: Any) -> None: ...

def create_many_to_many_intermediary_model(field: Any, klass: Any): ...

class ManyToManyField(RelatedField):
    many_to_many: bool = ...
    many_to_one: bool = ...
    one_to_many: bool = ...
    one_to_one: bool = ...
    rel_class: Any = ...
    description: Any = ...
    has_null_arg: Any = ...
    db_table: Any = ...
    swappable: Any = ...
    def __init__(self, to: Any, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., symmetrical: Optional[Any] = ..., through: Optional[Any] = ..., through_fields: Optional[Any] = ..., db_constraint: bool = ..., db_table: Optional[Any] = ..., swappable: bool = ..., **kwargs: Any) -> None: ...
    def check(self, **kwargs: Any): ...
    def deconstruct(self): ...
    def get_path_info(self, filtered_relation: Optional[Any] = ...): ...
    def get_reverse_path_info(self, filtered_relation: Optional[Any] = ...): ...
    m2m_db_table: Any = ...
    def contribute_to_class(self, cls: Any, name: Any, **kwargs: Any) -> None: ...  # type: ignore
    m2m_column_name: Any = ...
    m2m_reverse_name: Any = ...
    m2m_field_name: Any = ...
    m2m_reverse_field_name: Any = ...
    m2m_target_field_name: Any = ...
    m2m_reverse_target_field_name: Any = ...
    def contribute_to_related_class(self, cls: Any, related: Any): ...
    def set_attributes_from_rel(self) -> None: ...
    def value_from_object(self, obj: Any): ...
    def save_form_data(self, instance: Any, data: Any) -> None: ...
    def formfield(self, *, using: Optional[Any] = ..., **kwargs: Any): ...
    def db_check(self, connection: Any) -> None: ...
    def db_type(self, connection: Any) -> None: ...
    def db_parameters(self, connection: Any): ...

# Stubs for django.db.models.functions.datetime (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models import Func, Transform
from typing import Any, Optional

class TimezoneMixin:
    tzinfo: Any = ...
    def get_tzname(self): ...

class Extract(TimezoneMixin, Transform):
    lookup_name: Any = ...
    output_field: Any = ...
    tzinfo: Any = ...
    def __init__(self, expression: Any, lookup_name: Optional[Any] = ..., tzinfo: Optional[Any] = ..., **extra: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...

class ExtractYear(Extract):
    lookup_name: str = ...

class ExtractMonth(Extract):
    lookup_name: str = ...

class ExtractDay(Extract):
    lookup_name: str = ...

class ExtractWeek(Extract):
    lookup_name: str = ...

class ExtractWeekDay(Extract):
    lookup_name: str = ...

class ExtractQuarter(Extract):
    lookup_name: str = ...

class ExtractHour(Extract):
    lookup_name: str = ...

class ExtractMinute(Extract):
    lookup_name: str = ...

class ExtractSecond(Extract):
    lookup_name: str = ...

class Now(Func):
    template: str = ...
    output_field: Any = ...
    def as_postgresql(self, compiler: Any, connection: Any): ...

class TruncBase(TimezoneMixin, Transform):
    kind: Any = ...
    tzinfo: Any = ...
    def __init__(self, expression: Any, output_field: Optional[Any] = ..., tzinfo: Optional[Any] = ..., **extra: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def convert_value(self, value: Any, expression: Any, connection: Any): ...

class Trunc(TruncBase):
    kind: Any = ...
    def __init__(self, expression: Any, kind: Any, output_field: Optional[Any] = ..., tzinfo: Optional[Any] = ..., **extra: Any) -> None: ...

class TruncYear(TruncBase):
    kind: str = ...

class TruncQuarter(TruncBase):
    kind: str = ...

class TruncMonth(TruncBase):
    kind: str = ...

class TruncWeek(TruncBase):
    kind: str = ...

class TruncDay(TruncBase):
    kind: str = ...

class TruncDate(TruncBase):
    kind: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_sql(self, compiler: Any, connection: Any): ...

class TruncTime(TruncBase):
    kind: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_sql(self, compiler: Any, connection: Any): ...

class TruncHour(TruncBase):
    kind: str = ...

class TruncMinute(TruncBase):
    kind: str = ...

class TruncSecond(TruncBase):
    kind: str = ...

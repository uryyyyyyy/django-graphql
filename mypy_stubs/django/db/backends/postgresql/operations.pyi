# Stubs for django.db.backends.postgresql.operations (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.backends.base.operations import BaseDatabaseOperations
from typing import Any, Optional

class DatabaseOperations(BaseDatabaseOperations):
    cast_char_field_without_max_length: str = ...
    explain_prefix: str = ...
    def unification_cast_sql(self, output_field: Any): ...
    def date_extract_sql(self, lookup_type: Any, field_name: Any): ...
    def date_trunc_sql(self, lookup_type: Any, field_name: Any): ...
    def datetime_cast_date_sql(self, field_name: Any, tzname: Any): ...
    def datetime_cast_time_sql(self, field_name: Any, tzname: Any): ...
    def datetime_extract_sql(self, lookup_type: Any, field_name: Any, tzname: Any): ...
    def datetime_trunc_sql(self, lookup_type: Any, field_name: Any, tzname: Any): ...
    def time_trunc_sql(self, lookup_type: Any, field_name: Any): ...
    def deferrable_sql(self): ...
    def fetch_returned_insert_ids(self, cursor: Any): ...
    def lookup_cast(self, lookup_type: Any, internal_type: Optional[Any] = ...): ...
    def no_limit_value(self) -> None: ...
    def prepare_sql_script(self, sql: Any): ...
    def quote_name(self, name: Any): ...
    def set_time_zone_sql(self): ...
    def sql_flush(self, style: Any, tables: Any, sequences: Any, allow_cascade: bool = ...): ...
    def sequence_reset_by_name_sql(self, style: Any, sequences: Any): ...
    def tablespace_sql(self, tablespace: Any, inline: bool = ...): ...
    def sequence_reset_sql(self, style: Any, model_list: Any): ...
    def prep_for_iexact_query(self, x: Any): ...
    def max_name_length(self): ...
    def distinct_sql(self, fields: Any, params: Any): ...
    def last_executed_query(self, cursor: Any, sql: Any, params: Any): ...
    def return_insert_id(self): ...
    def bulk_insert_sql(self, fields: Any, placeholder_rows: Any): ...
    def adapt_datefield_value(self, value: Any): ...
    def adapt_datetimefield_value(self, value: Any): ...
    def adapt_timefield_value(self, value: Any): ...
    def adapt_ipaddressfield_value(self, value: Any): ...
    def subtract_temporals(self, internal_type: Any, lhs: Any, rhs: Any): ...
    def window_frame_range_start_end(self, start: Optional[Any] = ..., end: Optional[Any] = ...): ...
    def explain_query_prefix(self, format: Optional[Any] = ..., **options: Any): ...

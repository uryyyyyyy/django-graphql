# Stubs for django.db.backends.sqlite3.base (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .client import DatabaseClient
from .creation import DatabaseCreation
from .features import DatabaseFeatures
from .introspection import DatabaseIntrospection
from .operations import DatabaseOperations
from .schema import DatabaseSchemaEditor
from django.db.backends.base.base import BaseDatabaseWrapper
from sqlite3 import dbapi2 as Database
from typing import Any, Optional

def decoder(conv_func: Any): ...

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor: str = ...
    display_name: str = ...
    data_types: Any = ...
    data_types_suffix: Any = ...
    operators: Any = ...
    pattern_esc: str = ...
    pattern_ops: Any = ...
    Database: Any = ...
    SchemaEditorClass: Any = ...
    client_class: Any = ...
    creation_class: Any = ...
    features_class: Any = ...
    introspection_class: Any = ...
    ops_class: Any = ...
    def get_connection_params(self): ...
    def get_new_connection(self, conn_params: Any): ...
    def init_connection_state(self) -> None: ...
    def create_cursor(self, name: Optional[Any] = ...): ...
    def close(self) -> None: ...
    def disable_constraint_checking(self): ...
    def enable_constraint_checking(self) -> None: ...
    def check_constraints(self, table_names: Optional[Any] = ...) -> None: ...
    def is_usable(self): ...
    def is_in_memory_db(self): ...

FORMAT_QMARK_REGEX: Any

class SQLiteCursorWrapper(Database.Cursor):
    def execute(self, query: Any, params: Optional[Any] = ...): ...
    def executemany(self, query: Any, param_list: Any): ...
    def convert_query(self, query: Any): ...

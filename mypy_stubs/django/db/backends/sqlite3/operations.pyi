# Stubs for django.db.backends.sqlite3.operations (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.backends.base.operations import BaseDatabaseOperations
from typing import Any

class DatabaseOperations(BaseDatabaseOperations):
    cast_char_field_without_max_length: str = ...
    cast_data_types: Any = ...
    explain_prefix: str = ...
    def bulk_batch_size(self, fields: Any, objs: Any): ...
    def check_expression_support(self, expression: Any) -> None: ...
    def date_extract_sql(self, lookup_type: Any, field_name: Any): ...
    def date_interval_sql(self, timedelta: Any): ...
    def format_for_duration_arithmetic(self, sql: Any): ...
    def date_trunc_sql(self, lookup_type: Any, field_name: Any): ...
    def time_trunc_sql(self, lookup_type: Any, field_name: Any): ...
    def datetime_cast_date_sql(self, field_name: Any, tzname: Any): ...
    def datetime_cast_time_sql(self, field_name: Any, tzname: Any): ...
    def datetime_extract_sql(self, lookup_type: Any, field_name: Any, tzname: Any): ...
    def datetime_trunc_sql(self, lookup_type: Any, field_name: Any, tzname: Any): ...
    def time_extract_sql(self, lookup_type: Any, field_name: Any): ...
    def pk_default_value(self): ...
    def last_executed_query(self, cursor: Any, sql: Any, params: Any): ...
    def quote_name(self, name: Any): ...
    def no_limit_value(self): ...
    def sql_flush(self, style: Any, tables: Any, sequences: Any, allow_cascade: bool = ...): ...
    def execute_sql_flush(self, using: Any, sql_list: Any) -> None: ...
    def adapt_datetimefield_value(self, value: Any): ...
    def adapt_timefield_value(self, value: Any): ...
    def get_db_converters(self, expression: Any): ...
    def convert_datetimefield_value(self, value: Any, expression: Any, connection: Any): ...
    def convert_datefield_value(self, value: Any, expression: Any, connection: Any): ...
    def convert_timefield_value(self, value: Any, expression: Any, connection: Any): ...
    def get_decimalfield_converter(self, expression: Any): ...
    def convert_uuidfield_value(self, value: Any, expression: Any, connection: Any): ...
    def convert_booleanfield_value(self, value: Any, expression: Any, connection: Any): ...
    def bulk_insert_sql(self, fields: Any, placeholder_rows: Any): ...
    def combine_expression(self, connector: Any, sub_expressions: Any): ...
    def combine_duration_expression(self, connector: Any, sub_expressions: Any): ...
    def integer_field_range(self, internal_type: Any): ...
    def subtract_temporals(self, internal_type: Any, lhs: Any, rhs: Any): ...

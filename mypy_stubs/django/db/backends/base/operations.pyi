# Stubs for django.db.backends.base.operations (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class BaseDatabaseOperations:
    compiler_module: str = ...
    integer_field_ranges: Any = ...
    set_operators: Any = ...
    cast_data_types: Any = ...
    cast_char_field_without_max_length: Any = ...
    PRECEDING: str = ...
    FOLLOWING: str = ...
    UNBOUNDED_PRECEDING: Any = ...
    UNBOUNDED_FOLLOWING: Any = ...
    CURRENT_ROW: str = ...
    explain_prefix: Any = ...
    connection: Any = ...
    def __init__(self, connection: Any) -> None: ...
    def autoinc_sql(self, table: Any, column: Any) -> None: ...
    def bulk_batch_size(self, fields: Any, objs: Any): ...
    def cache_key_culling_sql(self): ...
    def unification_cast_sql(self, output_field: Any): ...
    def date_extract_sql(self, lookup_type: Any, field_name: Any) -> None: ...
    def date_interval_sql(self, timedelta: Any) -> None: ...
    def date_trunc_sql(self, lookup_type: Any, field_name: Any) -> None: ...
    def datetime_cast_date_sql(self, field_name: Any, tzname: Any) -> None: ...
    def datetime_cast_time_sql(self, field_name: Any, tzname: Any) -> None: ...
    def datetime_extract_sql(self, lookup_type: Any, field_name: Any, tzname: Any) -> None: ...
    def datetime_trunc_sql(self, lookup_type: Any, field_name: Any, tzname: Any) -> None: ...
    def time_trunc_sql(self, lookup_type: Any, field_name: Any) -> None: ...
    def time_extract_sql(self, lookup_type: Any, field_name: Any): ...
    def deferrable_sql(self): ...
    def distinct_sql(self, fields: Any, params: Any): ...
    def fetch_returned_insert_id(self, cursor: Any): ...
    def field_cast_sql(self, db_type: Any, internal_type: Any): ...
    def force_no_ordering(self): ...
    def for_update_sql(self, nowait: bool = ..., skip_locked: bool = ..., of: Any = ...): ...
    def limit_offset_sql(self, low_mark: Any, high_mark: Any): ...
    def last_executed_query(self, cursor: Any, sql: Any, params: Any): ...
    def last_insert_id(self, cursor: Any, table_name: Any, pk_name: Any): ...
    def lookup_cast(self, lookup_type: Any, internal_type: Optional[Any] = ...): ...
    def max_in_list_size(self) -> None: ...
    def max_name_length(self) -> None: ...
    def no_limit_value(self) -> None: ...
    def pk_default_value(self): ...
    def prepare_sql_script(self, sql: Any): ...
    def process_clob(self, value: Any): ...
    def return_insert_id(self) -> None: ...
    def compiler(self, compiler_name: Any): ...
    def quote_name(self, name: Any) -> None: ...
    def random_function_sql(self): ...
    def regex_lookup(self, lookup_type: Any) -> None: ...
    def savepoint_create_sql(self, sid: Any): ...
    def savepoint_commit_sql(self, sid: Any): ...
    def savepoint_rollback_sql(self, sid: Any): ...
    def set_time_zone_sql(self): ...
    def sql_flush(self, style: Any, tables: Any, sequences: Any, allow_cascade: bool = ...) -> None: ...
    def execute_sql_flush(self, using: Any, sql_list: Any) -> None: ...
    def sequence_reset_by_name_sql(self, style: Any, sequences: Any): ...
    def sequence_reset_sql(self, style: Any, model_list: Any): ...
    def start_transaction_sql(self): ...
    def end_transaction_sql(self, success: bool = ...): ...
    def tablespace_sql(self, tablespace: Any, inline: bool = ...): ...
    def prep_for_like_query(self, x: Any): ...
    prep_for_iexact_query: Any = ...
    def validate_autopk_value(self, value: Any): ...
    def adapt_unknown_value(self, value: Any): ...
    def adapt_datefield_value(self, value: Any): ...
    def adapt_datetimefield_value(self, value: Any): ...
    def adapt_timefield_value(self, value: Any): ...
    def adapt_decimalfield_value(self, value: Any, max_digits: Optional[Any] = ..., decimal_places: Optional[Any] = ...): ...
    def adapt_ipaddressfield_value(self, value: Any): ...
    def year_lookup_bounds_for_date_field(self, value: Any): ...
    def year_lookup_bounds_for_datetime_field(self, value: Any): ...
    def get_db_converters(self, expression: Any): ...
    def convert_durationfield_value(self, value: Any, expression: Any, connection: Any): ...
    def check_expression_support(self, expression: Any) -> None: ...
    def combine_expression(self, connector: Any, sub_expressions: Any): ...
    def combine_duration_expression(self, connector: Any, sub_expressions: Any): ...
    def binary_placeholder_sql(self, value: Any): ...
    def modify_insert_params(self, placeholder: Any, params: Any): ...
    def integer_field_range(self, internal_type: Any): ...
    def subtract_temporals(self, internal_type: Any, lhs: Any, rhs: Any): ...
    def window_frame_start(self, start: Any): ...
    def window_frame_end(self, end: Any): ...
    def window_frame_rows_start_end(self, start: Optional[Any] = ..., end: Optional[Any] = ...): ...
    def window_frame_range_start_end(self, start: Optional[Any] = ..., end: Optional[Any] = ...): ...
    def explain_query_prefix(self, format: Optional[Any] = ..., **options: Any): ...

# Stubs for django.db.migrations.state (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .exceptions import InvalidBasesError
from django.apps import AppConfig
from django.apps.registry import Apps
from typing import Any, Optional

def get_related_models_tuples(model: Any): ...
def get_related_models_recursive(model: Any): ...

class ProjectState:
    models: Any = ...
    real_apps: Any = ...
    is_delayed: bool = ...
    def __init__(self, models: Optional[Any] = ..., real_apps: Optional[Any] = ...) -> None: ...
    def add_model(self, model_state: Any) -> None: ...
    def remove_model(self, app_label: Any, model_name: Any) -> None: ...
    def reload_model(self, app_label: Any, model_name: Any, delay: bool = ...) -> None: ...
    def reload_models(self, models: Any, delay: bool = ...) -> None: ...
    def clone(self): ...
    def clear_delayed_apps_cache(self) -> None: ...
    def apps(self): ...
    @property
    apps: Any = ...
    def concrete_apps(self): ...
    @classmethod
    def from_apps(cls, apps: Any): ...
    def __eq__(self, other: Any): ...

class AppConfigStub(AppConfig):
    path: str = ...
    label: Any = ...
    def __init__(self, label: Any) -> None: ...
    models: Any = ...
    def import_models(self) -> None: ...

class StateApps(Apps):
    real_models: Any = ...
    def __init__(self, real_apps: Any, models: Any, ignore_swappable: bool = ...) -> None: ...
    ready: bool = ...
    def bulk_update(self) -> None: ...
    def render_multiple(self, model_states: Any) -> None: ...
    def clone(self): ...
    def register_model(self, app_label: Any, model: Any) -> None: ...
    def unregister_model(self, app_label: Any, model_name: Any) -> None: ...

class ModelState:
    app_label: Any = ...
    name: Any = ...
    fields: Any = ...
    options: Any = ...
    bases: Any = ...
    managers: Any = ...
    def __init__(self, app_label: Any, name: Any, fields: Any, options: Optional[Any] = ..., bases: Optional[Any] = ..., managers: Optional[Any] = ...) -> None: ...
    def name_lower(self): ...
    @classmethod
    def from_model(cls, model: Any, exclude_rels: bool = ...): ...
    def construct_managers(self): ...
    def clone(self): ...
    def render(self, apps: Any): ...
    def get_field_by_name(self, name: Any): ...
    def get_index_by_name(self, name: Any): ...
    def __eq__(self, other: Any): ...

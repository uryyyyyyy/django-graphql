# Stubs for django.http.response (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class BadHeaderError(ValueError): ...

class HttpResponseBase:
    status_code: int = ...
    cookies: Any = ...
    closed: bool = ...
    def __init__(self, content_type: Optional[Any] = ..., status: Optional[Any] = ..., reason: Optional[Any] = ..., charset: Optional[Any] = ...) -> None: ...
    @property
    def reason_phrase(self): ...
    @reason_phrase.setter
    def reason_phrase(self, value: Any) -> None: ...
    @property
    def charset(self): ...
    @charset.setter
    def charset(self, value: Any) -> None: ...
    def serialize_headers(self): ...
    __bytes__: Any = ...
    def __setitem__(self, header: Any, value: Any) -> None: ...
    def __delitem__(self, header: Any) -> None: ...
    def __getitem__(self, header: Any): ...
    def has_header(self, header: Any): ...
    __contains__: Any = ...
    def items(self): ...
    def get(self, header: Any, alternate: Optional[Any] = ...): ...
    def set_cookie(self, key: Any, value: str = ..., max_age: Optional[Any] = ..., expires: Optional[Any] = ..., path: str = ..., domain: Optional[Any] = ..., secure: bool = ..., httponly: bool = ..., samesite: Optional[Any] = ...) -> None: ...
    def setdefault(self, key: Any, value: Any) -> None: ...
    def set_signed_cookie(self, key: Any, value: Any, salt: str = ..., **kwargs: Any): ...
    def delete_cookie(self, key: Any, path: str = ..., domain: Optional[Any] = ...) -> None: ...
    def make_bytes(self, value: Any): ...
    def close(self) -> None: ...
    def write(self, content: Any) -> None: ...
    def flush(self) -> None: ...
    def tell(self) -> None: ...
    def readable(self): ...
    def seekable(self): ...
    def writable(self): ...
    def writelines(self, lines: Any) -> None: ...

class HttpResponse(HttpResponseBase):
    streaming: bool = ...
    content: Any = ...
    def __init__(self, content: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def serialize(self): ...
    __bytes__: Any = ...
    @property
    def content(self): ...
    @content.setter
    def content(self, value: Any) -> None: ...
    def __iter__(self): ...
    def write(self, content: Any) -> None: ...
    def tell(self): ...
    def getvalue(self): ...
    def writable(self): ...
    def writelines(self, lines: Any) -> None: ...

class StreamingHttpResponse(HttpResponseBase):
    streaming: bool = ...
    streaming_content: Any = ...
    def __init__(self, streaming_content: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    @property
    def content(self) -> None: ...
    @property
    def streaming_content(self): ...
    @streaming_content.setter
    def streaming_content(self, value: Any) -> None: ...
    def __iter__(self): ...
    def getvalue(self): ...

class FileResponse(StreamingHttpResponse):
    block_size: int = ...
    as_attachment: Any = ...
    filename: Any = ...
    def __init__(self, *args: Any, as_attachment: bool = ..., filename: str = ..., **kwargs: Any) -> None: ...
    def set_headers(self, filelike: Any) -> None: ...

class HttpResponseRedirectBase(HttpResponse):
    allowed_schemes: Any = ...
    def __init__(self, redirect_to: Any, *args: Any, **kwargs: Any) -> None: ...
    url: Any = ...

class HttpResponseRedirect(HttpResponseRedirectBase):
    status_code: int = ...

class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
    status_code: int = ...

class HttpResponseNotModified(HttpResponse):
    status_code: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def content(self) -> Any: ...

class HttpResponseBadRequest(HttpResponse):
    status_code: int = ...

class HttpResponseNotFound(HttpResponse):
    status_code: int = ...

class HttpResponseForbidden(HttpResponse):
    status_code: int = ...

class HttpResponseNotAllowed(HttpResponse):
    status_code: int = ...
    def __init__(self, permitted_methods: Any, *args: Any, **kwargs: Any) -> None: ...

class HttpResponseGone(HttpResponse):
    status_code: int = ...

class HttpResponseServerError(HttpResponse):
    status_code: int = ...

class Http404(Exception): ...

class JsonResponse(HttpResponse):
    def __init__(self, data: Any, encoder: Any = ..., safe: bool = ..., json_dumps_params: Optional[Any] = ..., **kwargs: Any) -> None: ...

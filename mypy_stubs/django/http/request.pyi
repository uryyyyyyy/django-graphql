# Stubs for django.http.request (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.utils.datastructures import MultiValueDict
from typing import Any, Optional

RAISE_ERROR: Any
host_validation_re: Any

class UnreadablePostError(IOError): ...
class RawPostDataException(Exception): ...

class HttpRequest:
    GET: Any = ...
    POST: Any = ...
    COOKIES: Any = ...
    META: Any = ...
    FILES: Any = ...
    path: str = ...
    path_info: str = ...
    method: Any = ...
    resolver_match: Any = ...
    content_type: Any = ...
    content_params: Any = ...
    def __init__(self) -> None: ...
    def get_host(self): ...
    def get_port(self): ...
    def get_full_path(self, force_append_slash: bool = ...): ...
    def get_full_path_info(self, force_append_slash: bool = ...): ...
    def get_signed_cookie(self, key: Any, default: Any = ..., salt: str = ..., max_age: Optional[Any] = ...): ...
    def get_raw_uri(self): ...
    def build_absolute_uri(self, location: Optional[Any] = ...): ...
    @property
    def scheme(self): ...
    def is_secure(self): ...
    def is_ajax(self): ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, val: Any) -> None: ...
    @property
    def upload_handlers(self): ...
    @upload_handlers.setter
    def upload_handlers(self, upload_handlers: Any) -> None: ...
    def parse_file_upload(self, META: Any, post_data: Any): ...
    @property
    def body(self): ...
    def close(self) -> None: ...
    def read(self, *args: Any, **kwargs: Any): ...
    def readline(self, *args: Any, **kwargs: Any): ...
    def __iter__(self) -> None: ...
    def xreadlines(self) -> None: ...
    def readlines(self): ...

class QueryDict(MultiValueDict):
    encoding: Any = ...
    def __init__(self, query_string: Optional[Any] = ..., mutable: bool = ..., encoding: Optional[Any] = ...) -> None: ...
    @classmethod
    def fromkeys(cls, *args, **kwargs): ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    def setlist(self, key: Any, list_: Any) -> None: ...
    def setlistdefault(self, key: Any, default_list: Optional[Any] = ...): ...
    def appendlist(self, key: Any, value: Any) -> None: ...
    def pop(self, key: Any, *args: Any): ...
    def popitem(self): ...
    def clear(self) -> None: ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def copy(self): ...
    def urlencode(self, safe: Optional[Any] = ...): ...

def bytes_to_text(s: Any, encoding: Any): ...
def split_domain_port(host: Any): ...
def validate_host(host: Any, allowed_hosts: Any): ...
